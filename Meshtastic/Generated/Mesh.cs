// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: meshtastic/mesh.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Meshtastic.Protobufs {

  /// <summary>Holder for reflection information generated from meshtastic/mesh.proto</summary>
  public static partial class MeshReflection {

    #region Descriptor
    /// <summary>File descriptor for meshtastic/mesh.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MeshReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtZXNodGFzdGljL21lc2gucHJvdG8SCm1lc2h0YXN0aWMaGG1lc2h0YXN0",
            "aWMvY2hhbm5lbC5wcm90bxoXbWVzaHRhc3RpYy9jb25maWcucHJvdG8aHm1l",
            "c2h0YXN0aWMvbW9kdWxlX2NvbmZpZy5wcm90bxoZbWVzaHRhc3RpYy9wb3J0",
            "bnVtcy5wcm90bxoabWVzaHRhc3RpYy90ZWxlbWV0cnkucHJvdG8aF21lc2h0",
            "YXN0aWMveG1vZGVtLnByb3RvGhptZXNodGFzdGljL2RldmljZV91aS5wcm90",
            "byKHBwoIUG9zaXRpb24SFwoKbGF0aXR1ZGVfaRgBIAEoD0gAiAEBEhgKC2xv",
            "bmdpdHVkZV9pGAIgASgPSAGIAQESFQoIYWx0aXR1ZGUYAyABKAVIAogBARIM",
            "CgR0aW1lGAQgASgHEjcKD2xvY2F0aW9uX3NvdXJjZRgFIAEoDjIeLm1lc2h0",
            "YXN0aWMuUG9zaXRpb24uTG9jU291cmNlEjcKD2FsdGl0dWRlX3NvdXJjZRgG",
            "IAEoDjIeLm1lc2h0YXN0aWMuUG9zaXRpb24uQWx0U291cmNlEhEKCXRpbWVz",
            "dGFtcBgHIAEoBxIfChd0aW1lc3RhbXBfbWlsbGlzX2FkanVzdBgIIAEoBRIZ",
            "CgxhbHRpdHVkZV9oYWUYCSABKBFIA4gBARIoChthbHRpdHVkZV9nZW9pZGFs",
            "X3NlcGFyYXRpb24YCiABKBFIBIgBARIMCgRQRE9QGAsgASgNEgwKBEhET1AY",
            "DCABKA0SDAoEVkRPUBgNIAEoDRIUCgxncHNfYWNjdXJhY3kYDiABKA0SGQoM",
            "Z3JvdW5kX3NwZWVkGA8gASgNSAWIAQESGQoMZ3JvdW5kX3RyYWNrGBAgASgN",
            "SAaIAQESEwoLZml4X3F1YWxpdHkYESABKA0SEAoIZml4X3R5cGUYEiABKA0S",
            "FAoMc2F0c19pbl92aWV3GBMgASgNEhEKCXNlbnNvcl9pZBgUIAEoDRITCgtu",
            "ZXh0X3VwZGF0ZRgVIAEoDRISCgpzZXFfbnVtYmVyGBYgASgNEhYKDnByZWNp",
            "c2lvbl9iaXRzGBcgASgNIk4KCUxvY1NvdXJjZRINCglMT0NfVU5TRVQQABIO",
            "CgpMT0NfTUFOVUFMEAESEAoMTE9DX0lOVEVSTkFMEAISEAoMTE9DX0VYVEVS",
            "TkFMEAMiYgoJQWx0U291cmNlEg0KCUFMVF9VTlNFVBAAEg4KCkFMVF9NQU5V",
            "QUwQARIQCgxBTFRfSU5URVJOQUwQAhIQCgxBTFRfRVhURVJOQUwQAxISCg5B",
            "TFRfQkFST01FVFJJQxAEQg0KC19sYXRpdHVkZV9pQg4KDF9sb25naXR1ZGVf",
            "aUILCglfYWx0aXR1ZGVCDwoNX2FsdGl0dWRlX2hhZUIeChxfYWx0aXR1ZGVf",
            "Z2VvaWRhbF9zZXBhcmF0aW9uQg8KDV9ncm91bmRfc3BlZWRCDwoNX2dyb3Vu",
            "ZF90cmFjayLYAQoEVXNlchIKCgJpZBgBIAEoCRIRCglsb25nX25hbWUYAiAB",
            "KAkSEgoKc2hvcnRfbmFtZRgDIAEoCRITCgdtYWNhZGRyGAQgASgMQgIYARIr",
            "Cghod19tb2RlbBgFIAEoDjIZLm1lc2h0YXN0aWMuSGFyZHdhcmVNb2RlbBIT",
            "Cgtpc19saWNlbnNlZBgGIAEoCBIyCgRyb2xlGAcgASgOMiQubWVzaHRhc3Rp",
            "Yy5Db25maWcuRGV2aWNlQ29uZmlnLlJvbGUSEgoKcHVibGljX2tleRgIIAEo",
            "DCJaCg5Sb3V0ZURpc2NvdmVyeRINCgVyb3V0ZRgBIAMoBxITCgtzbnJfdG93",
            "YXJkcxgCIAMoBRISCgpyb3V0ZV9iYWNrGAMgAygHEhAKCHNucl9iYWNrGAQg",
            "AygFIuIDCgdSb3V0aW5nEjMKDXJvdXRlX3JlcXVlc3QYASABKAsyGi5tZXNo",
            "dGFzdGljLlJvdXRlRGlzY292ZXJ5SAASMQoLcm91dGVfcmVwbHkYAiABKAsy",
            "Gi5tZXNodGFzdGljLlJvdXRlRGlzY292ZXJ5SAASMQoMZXJyb3JfcmVhc29u",
            "GAMgASgOMhkubWVzaHRhc3RpYy5Sb3V0aW5nLkVycm9ySAAisAIKBUVycm9y",
            "EggKBE5PTkUQABIMCghOT19ST1VURRABEgsKB0dPVF9OQUsQAhILCgdUSU1F",
            "T1VUEAMSEAoMTk9fSU5URVJGQUNFEAQSEgoOTUFYX1JFVFJBTlNNSVQQBRIO",
            "CgpOT19DSEFOTkVMEAYSDQoJVE9PX0xBUkdFEAcSDwoLTk9fUkVTUE9OU0UQ",
            "CBIUChBEVVRZX0NZQ0xFX0xJTUlUEAkSDwoLQkFEX1JFUVVFU1QQIBISCg5O",
            "T1RfQVVUSE9SSVpFRBAhEg4KClBLSV9GQUlMRUQQIhIWChJQS0lfVU5LTk9X",
            "Tl9QVUJLRVkQIxIZChVBRE1JTl9CQURfU0VTU0lPTl9LRVkQJBIhCh1BRE1J",
            "Tl9QVUJMSUNfS0VZX1VOQVVUSE9SSVpFRBAlQgkKB3ZhcmlhbnQiywEKBERh",
            "dGESJAoHcG9ydG51bRgBIAEoDjITLm1lc2h0YXN0aWMuUG9ydE51bRIPCgdw",
            "YXlsb2FkGAIgASgMEhUKDXdhbnRfcmVzcG9uc2UYAyABKAgSDAoEZGVzdBgE",
            "IAEoBxIOCgZzb3VyY2UYBSABKAcSEgoKcmVxdWVzdF9pZBgGIAEoBxIQCghy",
            "ZXBseV9pZBgHIAEoBxINCgVlbW9qaRgIIAEoBxIVCghiaXRmaWVsZBgJIAEo",
            "DUgAiAEBQgsKCV9iaXRmaWVsZCK8AQoIV2F5cG9pbnQSCgoCaWQYASABKA0S",
            "FwoKbGF0aXR1ZGVfaRgCIAEoD0gAiAEBEhgKC2xvbmdpdHVkZV9pGAMgASgP",
            "SAGIAQESDgoGZXhwaXJlGAQgASgNEhEKCWxvY2tlZF90bxgFIAEoDRIMCgRu",
            "YW1lGAYgASgJEhMKC2Rlc2NyaXB0aW9uGAcgASgJEgwKBGljb24YCCABKAdC",
            "DQoLX2xhdGl0dWRlX2lCDgoMX2xvbmdpdHVkZV9pImwKFk1xdHRDbGllbnRQ",
            "cm94eU1lc3NhZ2USDQoFdG9waWMYASABKAkSDgoEZGF0YRgCIAEoDEgAEg4K",
            "BHRleHQYAyABKAlIABIQCghyZXRhaW5lZBgEIAEoCEIRCg9wYXlsb2FkX3Zh",
            "cmlhbnQi/gQKCk1lc2hQYWNrZXQSDAoEZnJvbRgBIAEoBxIKCgJ0bxgCIAEo",
            "BxIPCgdjaGFubmVsGAMgASgNEiMKB2RlY29kZWQYBCABKAsyEC5tZXNodGFz",
            "dGljLkRhdGFIABITCgllbmNyeXB0ZWQYBSABKAxIABIKCgJpZBgGIAEoBxIP",
            "CgdyeF90aW1lGAcgASgHEg4KBnJ4X3NuchgIIAEoAhIRCglob3BfbGltaXQY",
            "CSABKA0SEAoId2FudF9hY2sYCiABKAgSMQoIcHJpb3JpdHkYCyABKA4yHy5t",
            "ZXNodGFzdGljLk1lc2hQYWNrZXQuUHJpb3JpdHkSDwoHcnhfcnNzaRgMIAEo",
            "BRIzCgdkZWxheWVkGA0gASgOMh4ubWVzaHRhc3RpYy5NZXNoUGFja2V0LkRl",
            "bGF5ZWRCAhgBEhAKCHZpYV9tcXR0GA4gASgIEhEKCWhvcF9zdGFydBgPIAEo",
            "DRISCgpwdWJsaWNfa2V5GBAgASgMEhUKDXBraV9lbmNyeXB0ZWQYESABKAgS",
            "EAoIbmV4dF9ob3AYEiABKA0SEgoKcmVsYXlfbm9kZRgTIAEoDSJzCghQcmlv",
            "cml0eRIJCgVVTlNFVBAAEgcKA01JThABEg4KCkJBQ0tHUk9VTkQQChILCgdE",
            "RUZBVUxUEEASDAoIUkVMSUFCTEUQRhIMCghSRVNQT05TRRBQEggKBEhJR0gQ",
            "ZBIHCgNBQ0sQeBIHCgNNQVgQfyJCCgdEZWxheWVkEgwKCE5PX0RFTEFZEAAS",
            "FQoRREVMQVlFRF9CUk9BRENBU1QQARISCg5ERUxBWUVEX0RJUkVDVBACQhEK",
            "D3BheWxvYWRfdmFyaWFudCKlAgoITm9kZUluZm8SCwoDbnVtGAEgASgNEh4K",
            "BHVzZXIYAiABKAsyEC5tZXNodGFzdGljLlVzZXISJgoIcG9zaXRpb24YAyAB",
            "KAsyFC5tZXNodGFzdGljLlBvc2l0aW9uEgsKA3NuchgEIAEoAhISCgpsYXN0",
            "X2hlYXJkGAUgASgHEjEKDmRldmljZV9tZXRyaWNzGAYgASgLMhkubWVzaHRh",
            "c3RpYy5EZXZpY2VNZXRyaWNzEg8KB2NoYW5uZWwYByABKA0SEAoIdmlhX21x",
            "dHQYCCABKAgSFgoJaG9wc19hd2F5GAkgASgNSACIAQESEwoLaXNfZmF2b3Jp",
            "dGUYCiABKAgSEgoKaXNfaWdub3JlZBgLIAEoCEIMCgpfaG9wc19hd2F5InQK",
            "Ck15Tm9kZUluZm8SEwoLbXlfbm9kZV9udW0YASABKA0SFAoMcmVib290X2Nv",
            "dW50GAggASgNEhcKD21pbl9hcHBfdmVyc2lvbhgLIAEoDRIRCglkZXZpY2Vf",
            "aWQYDCABKAwSDwoHcGlvX2VudhgNIAEoCSLAAQoJTG9nUmVjb3JkEg8KB21l",
            "c3NhZ2UYASABKAkSDAoEdGltZRgCIAEoBxIOCgZzb3VyY2UYAyABKAkSKgoF",
            "bGV2ZWwYBCABKA4yGy5tZXNodGFzdGljLkxvZ1JlY29yZC5MZXZlbCJYCgVM",
            "ZXZlbBIJCgVVTlNFVBAAEgwKCENSSVRJQ0FMEDISCQoFRVJST1IQKBILCgdX",
            "QVJOSU5HEB4SCAoESU5GTxAUEgkKBURFQlVHEAoSCQoFVFJBQ0UQBSJQCgtR",
            "dWV1ZVN0YXR1cxILCgNyZXMYASABKAUSDAoEZnJlZRgCIAEoDRIOCgZtYXhs",
            "ZW4YAyABKA0SFgoObWVzaF9wYWNrZXRfaWQYBCABKA0i+QUKCUZyb21SYWRp",
            "bxIKCgJpZBgBIAEoDRIoCgZwYWNrZXQYAiABKAsyFi5tZXNodGFzdGljLk1l",
            "c2hQYWNrZXRIABIpCgdteV9pbmZvGAMgASgLMhYubWVzaHRhc3RpYy5NeU5v",
            "ZGVJbmZvSAASKQoJbm9kZV9pbmZvGAQgASgLMhQubWVzaHRhc3RpYy5Ob2Rl",
            "SW5mb0gAEiQKBmNvbmZpZxgFIAEoCzISLm1lc2h0YXN0aWMuQ29uZmlnSAAS",
            "KwoKbG9nX3JlY29yZBgGIAEoCzIVLm1lc2h0YXN0aWMuTG9nUmVjb3JkSAAS",
            "HAoSY29uZmlnX2NvbXBsZXRlX2lkGAcgASgNSAASEgoIcmVib290ZWQYCCAB",
            "KAhIABIwCgxtb2R1bGVDb25maWcYCSABKAsyGC5tZXNodGFzdGljLk1vZHVs",
            "ZUNvbmZpZ0gAEiYKB2NoYW5uZWwYCiABKAsyEy5tZXNodGFzdGljLkNoYW5u",
            "ZWxIABIuCgtxdWV1ZVN0YXR1cxgLIAEoCzIXLm1lc2h0YXN0aWMuUXVldWVT",
            "dGF0dXNIABIqCgx4bW9kZW1QYWNrZXQYDCABKAsyEi5tZXNodGFzdGljLlhN",
            "b2RlbUgAEi4KCG1ldGFkYXRhGA0gASgLMhoubWVzaHRhc3RpYy5EZXZpY2VN",
            "ZXRhZGF0YUgAEkQKFm1xdHRDbGllbnRQcm94eU1lc3NhZ2UYDiABKAsyIi5t",
            "ZXNodGFzdGljLk1xdHRDbGllbnRQcm94eU1lc3NhZ2VIABIoCghmaWxlSW5m",
            "bxgPIAEoCzIULm1lc2h0YXN0aWMuRmlsZUluZm9IABI8ChJjbGllbnROb3Rp",
            "ZmljYXRpb24YECABKAsyHi5tZXNodGFzdGljLkNsaWVudE5vdGlmaWNhdGlv",
            "bkgAEjQKDmRldmljZXVpQ29uZmlnGBEgASgLMhoubWVzaHRhc3RpYy5EZXZp",
            "Y2VVSUNvbmZpZ0gAQhEKD3BheWxvYWRfdmFyaWFudCKDAQoSQ2xpZW50Tm90",
            "aWZpY2F0aW9uEhUKCHJlcGx5X2lkGAEgASgNSACIAQESDAoEdGltZRgCIAEo",
            "BxIqCgVsZXZlbBgDIAEoDjIbLm1lc2h0YXN0aWMuTG9nUmVjb3JkLkxldmVs",
            "Eg8KB21lc3NhZ2UYBCABKAlCCwoJX3JlcGx5X2lkIjEKCEZpbGVJbmZvEhEK",
            "CWZpbGVfbmFtZRgBIAEoCRISCgpzaXplX2J5dGVzGAIgASgNIpQCCgdUb1Jh",
            "ZGlvEigKBnBhY2tldBgBIAEoCzIWLm1lc2h0YXN0aWMuTWVzaFBhY2tldEgA",
            "EhgKDndhbnRfY29uZmlnX2lkGAMgASgNSAASFAoKZGlzY29ubmVjdBgEIAEo",
            "CEgAEioKDHhtb2RlbVBhY2tldBgFIAEoCzISLm1lc2h0YXN0aWMuWE1vZGVt",
            "SAASRAoWbXF0dENsaWVudFByb3h5TWVzc2FnZRgGIAEoCzIiLm1lc2h0YXN0",
            "aWMuTXF0dENsaWVudFByb3h5TWVzc2FnZUgAEioKCWhlYXJ0YmVhdBgHIAEo",
            "CzIVLm1lc2h0YXN0aWMuSGVhcnRiZWF0SABCEQoPcGF5bG9hZF92YXJpYW50",
            "IkAKCkNvbXByZXNzZWQSJAoHcG9ydG51bRgBIAEoDjITLm1lc2h0YXN0aWMu",
            "UG9ydE51bRIMCgRkYXRhGAIgASgMIocBCgxOZWlnaGJvckluZm8SDwoHbm9k",
            "ZV9pZBgBIAEoDRIXCg9sYXN0X3NlbnRfYnlfaWQYAiABKA0SJAocbm9kZV9i",
            "cm9hZGNhc3RfaW50ZXJ2YWxfc2VjcxgDIAEoDRInCgluZWlnaGJvcnMYBCAD",
            "KAsyFC5tZXNodGFzdGljLk5laWdoYm9yImQKCE5laWdoYm9yEg8KB25vZGVf",
            "aWQYASABKA0SCwoDc25yGAIgASgCEhQKDGxhc3RfcnhfdGltZRgDIAEoBxIk",
            "Chxub2RlX2Jyb2FkY2FzdF9pbnRlcnZhbF9zZWNzGAQgASgNItcCCg5EZXZp",
            "Y2VNZXRhZGF0YRIYChBmaXJtd2FyZV92ZXJzaW9uGAEgASgJEhwKFGRldmlj",
            "ZV9zdGF0ZV92ZXJzaW9uGAIgASgNEhMKC2NhblNodXRkb3duGAMgASgIEg8K",
            "B2hhc1dpZmkYBCABKAgSFAoMaGFzQmx1ZXRvb3RoGAUgASgIEhMKC2hhc0V0",
            "aGVybmV0GAYgASgIEjIKBHJvbGUYByABKA4yJC5tZXNodGFzdGljLkNvbmZp",
            "Zy5EZXZpY2VDb25maWcuUm9sZRIWCg5wb3NpdGlvbl9mbGFncxgIIAEoDRIr",
            "Cghod19tb2RlbBgJIAEoDjIZLm1lc2h0YXN0aWMuSGFyZHdhcmVNb2RlbBIZ",
            "ChFoYXNSZW1vdGVIYXJkd2FyZRgKIAEoCBIOCgZoYXNQS0MYCyABKAgSGAoQ",
            "ZXhjbHVkZWRfbW9kdWxlcxgMIAEoDSILCglIZWFydGJlYXQiVQoVTm9kZVJl",
            "bW90ZUhhcmR3YXJlUGluEhAKCG5vZGVfbnVtGAEgASgNEioKA3BpbhgCIAEo",
            "CzIdLm1lc2h0YXN0aWMuUmVtb3RlSGFyZHdhcmVQaW4iZQoOQ2h1bmtlZFBh",
            "eWxvYWQSEgoKcGF5bG9hZF9pZBgBIAEoDRITCgtjaHVua19jb3VudBgCIAEo",
            "DRITCgtjaHVua19pbmRleBgDIAEoDRIVCg1wYXlsb2FkX2NodW5rGAQgASgM",
            "Ih8KDXJlc2VuZF9jaHVua3MSDgoGY2h1bmtzGAEgAygNIqoBChZDaHVua2Vk",
            "UGF5bG9hZFJlc3BvbnNlEhIKCnBheWxvYWRfaWQYASABKA0SGgoQcmVxdWVz",
            "dF90cmFuc2ZlchgCIAEoCEgAEhkKD2FjY2VwdF90cmFuc2ZlchgDIAEoCEgA",
            "EjIKDXJlc2VuZF9jaHVua3MYBCABKAsyGS5tZXNodGFzdGljLnJlc2VuZF9j",
            "aHVua3NIAEIRCg9wYXlsb2FkX3ZhcmlhbnQq3AwKDUhhcmR3YXJlTW9kZWwS",
            "CQoFVU5TRVQQABIMCghUTE9SQV9WMhABEgwKCFRMT1JBX1YxEAISEgoOVExP",
            "UkFfVjJfMV8xUDYQAxIJCgVUQkVBTRAEEg8KC0hFTFRFQ19WMl8wEAUSDgoK",
            "VEJFQU1fVjBQNxAGEgoKBlRfRUNITxAHEhAKDFRMT1JBX1YxXzFQMxAIEgsK",
            "B1JBSzQ2MzEQCRIPCgtIRUxURUNfVjJfMRAKEg0KCUhFTFRFQ19WMRALEhgK",
            "FExJTFlHT19UQkVBTV9TM19DT1JFEAwSDAoIUkFLMTEyMDAQDRILCgdOQU5P",
            "X0cxEA4SEgoOVExPUkFfVjJfMV8xUDgQDxIPCgtUTE9SQV9UM19TMxAQEhQK",
            "EE5BTk9fRzFfRVhQTE9SRVIQERIRCg1OQU5PX0cyX1VMVFJBEBISDQoJTE9S",
            "QV9UWVBFEBMSCwoHV0lQSE9ORRAUEg4KCldJT19XTTExMTAQFRILCgdSQUsy",
            "NTYwEBYSEwoPSEVMVEVDX0hSVV8zNjAxEBcSGgoWSEVMVEVDX1dJUkVMRVNT",
            "X0JSSURHRRAYEg4KClNUQVRJT05fRzEQGRIMCghSQUsxMTMxMBAaEhQKEFNF",
            "TlNFTE9SQV9SUDIwNDAQGxIQCgxTRU5TRUxPUkFfUzMQHBINCglDQU5BUllP",
            "TkUQHRIPCgtSUDIwNDBfTE9SQRAeEg4KClNUQVRJT05fRzIQHxIRCg1MT1JB",
            "X1JFTEFZX1YxECASDgoKTlJGNTI4NDBESxAhEgcKA1BQUhAiEg8KC0dFTklF",
            "QkxPQ0tTECMSEQoNTlJGNTJfVU5LTk9XThAkEg0KCVBPUlREVUlOTxAlEg8K",
            "C0FORFJPSURfU0lNECYSCgoGRElZX1YxECcSFQoRTlJGNTI4NDBfUENBMTAw",
            "NTkQKBIKCgZEUl9ERVYQKRILCgdNNVNUQUNLECoSDQoJSEVMVEVDX1YzECsS",
            "EQoNSEVMVEVDX1dTTF9WMxAsEhMKD0JFVEFGUFZfMjQwMF9UWBAtEhcKE0JF",
            "VEFGUFZfOTAwX05BTk9fVFgQLhIMCghSUElfUElDTxAvEhsKF0hFTFRFQ19X",
            "SVJFTEVTU19UUkFDS0VSEDASGQoVSEVMVEVDX1dJUkVMRVNTX1BBUEVSEDES",
            "CgoGVF9ERUNLEDISDgoKVF9XQVRDSF9TMxAzEhEKDVBJQ09NUFVURVJfUzMQ",
            "NBIPCgtIRUxURUNfSFQ2MhA1EhIKDkVCWVRFX0VTUDMyX1MzEDYSEQoNRVNQ",
            "MzJfUzNfUElDTxA3Eg0KCUNIQVRURVJfMhA4Eh4KGkhFTFRFQ19XSVJFTEVT",
            "U19QQVBFUl9WMV8wEDkSIAocSEVMVEVDX1dJUkVMRVNTX1RSQUNLRVJfVjFf",
            "MBA6EgsKB1VOUEhPTkUQOxIMCghURF9MT1JBQxA8EhMKD0NERUJZVEVfRU9S",
            "QV9TMxA9Eg8KC1RXQ19NRVNIX1Y0ED4SFgoSTlJGNTJfUFJPTUlDUk9fRElZ",
            "ED8SHwobUkFESU9NQVNURVJfOTAwX0JBTkRJVF9OQU5PEEASHAoYSEVMVEVD",
            "X0NBUFNVTEVfU0VOU09SX1YzEEESHQoZSEVMVEVDX1ZJU0lPTl9NQVNURVJf",
            "VDE5MBBCEh0KGUhFTFRFQ19WSVNJT05fTUFTVEVSX0UyMTMQQxIdChlIRUxU",
            "RUNfVklTSU9OX01BU1RFUl9FMjkwEEQSGQoVSEVMVEVDX01FU0hfTk9ERV9U",
            "MTE0EEUSFgoSU0VOU0VDQVBfSU5ESUNBVE9SEEYSEwoPVFJBQ0tFUl9UMTAw",
            "MF9FEEcSCwoHUkFLMzE3MhBIEgoKBldJT19FNRBJEhoKFlJBRElPTUFTVEVS",
            "XzkwMF9CQU5ESVQQShITCg9NRTI1TFMwMV80WTEwVEQQSxIYChRSUDIwNDBf",
            "RkVBVEhFUl9SRk05NRBMEhUKEU01U1RBQ0tfQ09SRUJBU0lDEE0SEQoNTTVT",
            "VEFDS19DT1JFMhBOEg0KCVJQSV9QSUNPMhBPEhIKDk01U1RBQ0tfQ09SRVMz",
            "EFASEQoNU0VFRURfWElBT19TMxBREgsKB01TMjRTRjEQUhIMCghUTE9SQV9D",
            "NhBTEg8KC1dJU01FU0hfVEFQEFQSDwoKUFJJVkFURV9IVxD/ASosCglDb25z",
            "dGFudHMSCAoEWkVSTxAAEhUKEERBVEFfUEFZTE9BRF9MRU4Q6QEqtAIKEUNy",
            "aXRpY2FsRXJyb3JDb2RlEggKBE5PTkUQABIPCgtUWF9XQVRDSERPRxABEhQK",
            "EFNMRUVQX0VOVEVSX1dBSVQQAhIMCghOT19SQURJTxADEg8KC1VOU1BFQ0lG",
            "SUVEEAQSFQoRVUJMT1hfVU5JVF9GQUlMRUQQBRINCglOT19BWFAxOTIQBhIZ",
            "ChVJTlZBTElEX1JBRElPX1NFVFRJTkcQBxITCg9UUkFOU01JVF9GQUlMRUQQ",
            "CBIMCghCUk9XTk9VVBAJEhIKDlNYMTI2Ml9GQUlMVVJFEAoSEQoNUkFESU9f",
            "U1BJX0JVRxALEiAKHEZMQVNIX0NPUlJVUFRJT05fUkVDT1ZFUkFCTEUQDBIi",
            "Ch5GTEFTSF9DT1JSVVBUSU9OX1VOUkVDT1ZFUkFCTEUQDSrTAgoPRXhjbHVk",
            "ZWRNb2R1bGVzEhEKDUVYQ0xVREVEX05PTkUQABIPCgtNUVRUX0NPTkZJRxAB",
            "EhEKDVNFUklBTF9DT05GSUcQAhITCg9FWFROT1RJRl9DT05GSUcQBBIXChNT",
            "VE9SRUZPUldBUkRfQ09ORklHEAgSFAoQUkFOR0VURVNUX0NPTkZJRxAQEhQK",
            "EFRFTEVNRVRSWV9DT05GSUcQIBIUChBDQU5ORURNU0dfQ09ORklHEEASEQoM",
            "QVVESU9fQ09ORklHEIABEhoKFVJFTU9URUhBUkRXQVJFX0NPTkZJRxCAAhIY",
            "ChNORUlHSEJPUklORk9fQ09ORklHEIAEEhsKFkFNQklFTlRMSUdIVElOR19D",
            "T05GSUcQgAgSGwoWREVURUNUSU9OU0VOU09SX0NPTkZJRxCAEBIWChFQQVhD",
            "T1VOVEVSX0NPTkZJRxCAIEJfChNjb20uZ2Vla3N2aWxsZS5tZXNoQgpNZXNo",
            "UHJvdG9zWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIU",
            "TWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Meshtastic.Protobufs.ChannelReflection.Descriptor, global::Meshtastic.Protobufs.ConfigReflection.Descriptor, global::Meshtastic.Protobufs.ModuleConfigReflection.Descriptor, global::Meshtastic.Protobufs.PortnumsReflection.Descriptor, global::Meshtastic.Protobufs.TelemetryReflection.Descriptor, global::Meshtastic.Protobufs.XmodemReflection.Descriptor, global::Meshtastic.Protobufs.DeviceUiReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Meshtastic.Protobufs.HardwareModel), typeof(global::Meshtastic.Protobufs.Constants), typeof(global::Meshtastic.Protobufs.CriticalErrorCode), typeof(global::Meshtastic.Protobufs.ExcludedModules), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Position), global::Meshtastic.Protobufs.Position.Parser, new[]{ "LatitudeI", "LongitudeI", "Altitude", "Time", "LocationSource", "AltitudeSource", "Timestamp", "TimestampMillisAdjust", "AltitudeHae", "AltitudeGeoidalSeparation", "PDOP", "HDOP", "VDOP", "GpsAccuracy", "GroundSpeed", "GroundTrack", "FixQuality", "FixType", "SatsInView", "SensorId", "NextUpdate", "SeqNumber", "PrecisionBits" }, new[]{ "LatitudeI", "LongitudeI", "Altitude", "AltitudeHae", "AltitudeGeoidalSeparation", "GroundSpeed", "GroundTrack" }, new[]{ typeof(global::Meshtastic.Protobufs.Position.Types.LocSource), typeof(global::Meshtastic.Protobufs.Position.Types.AltSource) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.User), global::Meshtastic.Protobufs.User.Parser, new[]{ "Id", "LongName", "ShortName", "Macaddr", "HwModel", "IsLicensed", "Role", "PublicKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.RouteDiscovery), global::Meshtastic.Protobufs.RouteDiscovery.Parser, new[]{ "Route", "SnrTowards", "RouteBack", "SnrBack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Routing), global::Meshtastic.Protobufs.Routing.Parser, new[]{ "RouteRequest", "RouteReply", "ErrorReason" }, new[]{ "Variant" }, new[]{ typeof(global::Meshtastic.Protobufs.Routing.Types.Error) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Data), global::Meshtastic.Protobufs.Data.Parser, new[]{ "Portnum", "Payload", "WantResponse", "Dest", "Source", "RequestId", "ReplyId", "Emoji", "Bitfield" }, new[]{ "Bitfield" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Waypoint), global::Meshtastic.Protobufs.Waypoint.Parser, new[]{ "Id", "LatitudeI", "LongitudeI", "Expire", "LockedTo", "Name", "Description", "Icon" }, new[]{ "LatitudeI", "LongitudeI" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.MqttClientProxyMessage), global::Meshtastic.Protobufs.MqttClientProxyMessage.Parser, new[]{ "Topic", "Data", "Text", "Retained" }, new[]{ "PayloadVariant" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.MeshPacket), global::Meshtastic.Protobufs.MeshPacket.Parser, new[]{ "From", "To", "Channel", "Decoded", "Encrypted", "Id", "RxTime", "RxSnr", "HopLimit", "WantAck", "Priority", "RxRssi", "Delayed", "ViaMqtt", "HopStart", "PublicKey", "PkiEncrypted", "NextHop", "RelayNode" }, new[]{ "PayloadVariant" }, new[]{ typeof(global::Meshtastic.Protobufs.MeshPacket.Types.Priority), typeof(global::Meshtastic.Protobufs.MeshPacket.Types.Delayed) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.NodeInfo), global::Meshtastic.Protobufs.NodeInfo.Parser, new[]{ "Num", "User", "Position", "Snr", "LastHeard", "DeviceMetrics", "Channel", "ViaMqtt", "HopsAway", "IsFavorite", "IsIgnored" }, new[]{ "HopsAway" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.MyNodeInfo), global::Meshtastic.Protobufs.MyNodeInfo.Parser, new[]{ "MyNodeNum", "RebootCount", "MinAppVersion", "DeviceId", "PioEnv" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.LogRecord), global::Meshtastic.Protobufs.LogRecord.Parser, new[]{ "Message", "Time", "Source", "Level" }, null, new[]{ typeof(global::Meshtastic.Protobufs.LogRecord.Types.Level) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.QueueStatus), global::Meshtastic.Protobufs.QueueStatus.Parser, new[]{ "Res", "Free", "Maxlen", "MeshPacketId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.FromRadio), global::Meshtastic.Protobufs.FromRadio.Parser, new[]{ "Id", "Packet", "MyInfo", "NodeInfo", "Config", "LogRecord", "ConfigCompleteId", "Rebooted", "ModuleConfig", "Channel", "QueueStatus", "XmodemPacket", "Metadata", "MqttClientProxyMessage", "FileInfo", "ClientNotification", "DeviceuiConfig" }, new[]{ "PayloadVariant" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.ClientNotification), global::Meshtastic.Protobufs.ClientNotification.Parser, new[]{ "ReplyId", "Time", "Level", "Message" }, new[]{ "ReplyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.FileInfo), global::Meshtastic.Protobufs.FileInfo.Parser, new[]{ "FileName", "SizeBytes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.ToRadio), global::Meshtastic.Protobufs.ToRadio.Parser, new[]{ "Packet", "WantConfigId", "Disconnect", "XmodemPacket", "MqttClientProxyMessage", "Heartbeat" }, new[]{ "PayloadVariant" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Compressed), global::Meshtastic.Protobufs.Compressed.Parser, new[]{ "Portnum", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.NeighborInfo), global::Meshtastic.Protobufs.NeighborInfo.Parser, new[]{ "NodeId", "LastSentById", "NodeBroadcastIntervalSecs", "Neighbors" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Neighbor), global::Meshtastic.Protobufs.Neighbor.Parser, new[]{ "NodeId", "Snr", "LastRxTime", "NodeBroadcastIntervalSecs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.DeviceMetadata), global::Meshtastic.Protobufs.DeviceMetadata.Parser, new[]{ "FirmwareVersion", "DeviceStateVersion", "CanShutdown", "HasWifi", "HasBluetooth", "HasEthernet", "Role", "PositionFlags", "HwModel", "HasRemoteHardware", "HasPKC", "ExcludedModules" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.Heartbeat), global::Meshtastic.Protobufs.Heartbeat.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.NodeRemoteHardwarePin), global::Meshtastic.Protobufs.NodeRemoteHardwarePin.Parser, new[]{ "NodeNum", "Pin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.ChunkedPayload), global::Meshtastic.Protobufs.ChunkedPayload.Parser, new[]{ "PayloadId", "ChunkCount", "ChunkIndex", "PayloadChunk" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.resend_chunks), global::Meshtastic.Protobufs.resend_chunks.Parser, new[]{ "Chunks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.ChunkedPayloadResponse), global::Meshtastic.Protobufs.ChunkedPayloadResponse.Parser, new[]{ "PayloadId", "RequestTransfer", "AcceptTransfer", "ResendChunks" }, new[]{ "PayloadVariant" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  /// Note: these enum names must EXACTLY match the string used in the device
  /// bin/build-all.sh script.
  /// Because they will be used to find firmware filenames in the android app for OTA updates.
  /// To match the old style filenames, _ is converted to -, p is converted to .
  /// </summary>
  public enum HardwareModel {
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("UNSET")] Unset = 0,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("TLORA_V2")] TloraV2 = 1,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("TLORA_V1")] TloraV1 = 2,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("TLORA_V2_1_1P6")] TloraV211P6 = 3,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("TBEAM")] Tbeam = 4,
    /// <summary>
    ///
    /// The original heltec WiFi_Lora_32_V2, which had battery voltage sensing hooked to GPIO 13
    /// (see HELTEC_V2 for the new version).
    /// </summary>
    [pbr::OriginalName("HELTEC_V2_0")] HeltecV20 = 5,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("TBEAM_V0P7")] TbeamV0P7 = 6,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("T_ECHO")] TEcho = 7,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("TLORA_V1_1P3")] TloraV11P3 = 8,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("RAK4631")] Rak4631 = 9,
    /// <summary>
    ///
    /// The new version of the heltec WiFi_Lora_32_V2 board that has battery sensing hooked to GPIO 37.
    /// Sadly they did not update anything on the silkscreen to identify this board
    /// </summary>
    [pbr::OriginalName("HELTEC_V2_1")] HeltecV21 = 10,
    /// <summary>
    ///
    /// Ancient heltec WiFi_Lora_32 board
    /// </summary>
    [pbr::OriginalName("HELTEC_V1")] HeltecV1 = 11,
    /// <summary>
    ///
    /// New T-BEAM with ESP32-S3 CPU
    /// </summary>
    [pbr::OriginalName("LILYGO_TBEAM_S3_CORE")] LilygoTbeamS3Core = 12,
    /// <summary>
    ///
    /// RAK WisBlock ESP32 core: https://docs.rakwireless.com/Product-Categories/WisBlock/RAK11200/Overview/
    /// </summary>
    [pbr::OriginalName("RAK11200")] Rak11200 = 13,
    /// <summary>
    ///
    /// B&amp;Q Consulting Nano Edition G1: https://uniteng.com/wiki/doku.php?id=meshtastic:nano
    /// </summary>
    [pbr::OriginalName("NANO_G1")] NanoG1 = 14,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("TLORA_V2_1_1P8")] TloraV211P8 = 15,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("TLORA_T3_S3")] TloraT3S3 = 16,
    /// <summary>
    ///
    /// B&amp;Q Consulting Nano G1 Explorer: https://wiki.uniteng.com/en/meshtastic/nano-g1-explorer
    /// </summary>
    [pbr::OriginalName("NANO_G1_EXPLORER")] NanoG1Explorer = 17,
    /// <summary>
    ///
    /// B&amp;Q Consulting Nano G2 Ultra: https://wiki.uniteng.com/en/meshtastic/nano-g2-ultra
    /// </summary>
    [pbr::OriginalName("NANO_G2_ULTRA")] NanoG2Ultra = 18,
    /// <summary>
    ///
    /// LoRAType device: https://loratype.org/
    /// </summary>
    [pbr::OriginalName("LORA_TYPE")] LoraType = 19,
    /// <summary>
    ///
    /// wiphone https://www.wiphone.io/
    /// </summary>
    [pbr::OriginalName("WIPHONE")] Wiphone = 20,
    /// <summary>
    ///
    /// WIO Tracker WM1110 family from Seeed Studio. Includes wio-1110-tracker and wio-1110-sdk
    /// </summary>
    [pbr::OriginalName("WIO_WM1110")] WioWm1110 = 21,
    /// <summary>
    ///
    /// RAK2560 Solar base station based on RAK4630
    /// </summary>
    [pbr::OriginalName("RAK2560")] Rak2560 = 22,
    /// <summary>
    ///
    /// Heltec HRU-3601: https://heltec.org/project/hru-3601/
    /// </summary>
    [pbr::OriginalName("HELTEC_HRU_3601")] HeltecHru3601 = 23,
    /// <summary>
    ///
    /// Heltec Wireless Bridge
    /// </summary>
    [pbr::OriginalName("HELTEC_WIRELESS_BRIDGE")] HeltecWirelessBridge = 24,
    /// <summary>
    ///
    /// B&amp;Q Consulting Station Edition G1: https://uniteng.com/wiki/doku.php?id=meshtastic:station
    /// </summary>
    [pbr::OriginalName("STATION_G1")] StationG1 = 25,
    /// <summary>
    ///
    /// RAK11310 (RP2040 + SX1262)
    /// </summary>
    [pbr::OriginalName("RAK11310")] Rak11310 = 26,
    /// <summary>
    ///
    /// Makerfabs SenseLoRA Receiver (RP2040 + RFM96)
    /// </summary>
    [pbr::OriginalName("SENSELORA_RP2040")] SenseloraRp2040 = 27,
    /// <summary>
    ///
    /// Makerfabs SenseLoRA Industrial Monitor (ESP32-S3 + RFM96)
    /// </summary>
    [pbr::OriginalName("SENSELORA_S3")] SenseloraS3 = 28,
    /// <summary>
    ///
    /// Canary Radio Company - CanaryOne: https://canaryradio.io/products/canaryone
    /// </summary>
    [pbr::OriginalName("CANARYONE")] Canaryone = 29,
    /// <summary>
    ///
    /// Waveshare RP2040 LoRa - https://www.waveshare.com/rp2040-lora.htm
    /// </summary>
    [pbr::OriginalName("RP2040_LORA")] Rp2040Lora = 30,
    /// <summary>
    ///
    /// B&amp;Q Consulting Station G2: https://wiki.uniteng.com/en/meshtastic/station-g2
    /// </summary>
    [pbr::OriginalName("STATION_G2")] StationG2 = 31,
    /// <summary>
    ///
    /// ---------------------------------------------------------------------------
    /// Less common/prototype boards listed here (needs one more byte over the air)
    /// ---------------------------------------------------------------------------
    /// </summary>
    [pbr::OriginalName("LORA_RELAY_V1")] LoraRelayV1 = 32,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("NRF52840DK")] Nrf52840Dk = 33,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("PPR")] Ppr = 34,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("GENIEBLOCKS")] Genieblocks = 35,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("NRF52_UNKNOWN")] Nrf52Unknown = 36,
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("PORTDUINO")] Portduino = 37,
    /// <summary>
    ///
    /// The simulator built into the android app
    /// </summary>
    [pbr::OriginalName("ANDROID_SIM")] AndroidSim = 38,
    /// <summary>
    ///
    /// Custom DIY device based on @NanoVHF schematics: https://github.com/NanoVHF/Meshtastic-DIY/tree/main/Schematics
    /// </summary>
    [pbr::OriginalName("DIY_V1")] DiyV1 = 39,
    /// <summary>
    ///
    /// nRF52840 Dongle : https://www.nordicsemi.com/Products/Development-hardware/nrf52840-dongle/
    /// </summary>
    [pbr::OriginalName("NRF52840_PCA10059")] Nrf52840Pca10059 = 40,
    /// <summary>
    ///
    /// Custom Disaster Radio esp32 v3 device https://github.com/sudomesh/disaster-radio/tree/master/hardware/board_esp32_v3
    /// </summary>
    [pbr::OriginalName("DR_DEV")] DrDev = 41,
    /// <summary>
    ///
    /// M5 esp32 based MCU modules with enclosure, TFT and LORA Shields. All Variants (Basic, Core, Fire, Core2, CoreS3, Paper) https://m5stack.com/
    /// </summary>
    [pbr::OriginalName("M5STACK")] M5Stack = 42,
    /// <summary>
    ///
    /// New Heltec LoRA32 with ESP32-S3 CPU
    /// </summary>
    [pbr::OriginalName("HELTEC_V3")] HeltecV3 = 43,
    /// <summary>
    ///
    /// New Heltec Wireless Stick Lite with ESP32-S3 CPU
    /// </summary>
    [pbr::OriginalName("HELTEC_WSL_V3")] HeltecWslV3 = 44,
    /// <summary>
    ///
    /// New BETAFPV ELRS Micro TX Module 2.4G with ESP32 CPU
    /// </summary>
    [pbr::OriginalName("BETAFPV_2400_TX")] Betafpv2400Tx = 45,
    /// <summary>
    ///
    /// BetaFPV ExpressLRS "Nano" TX Module 900MHz with ESP32 CPU
    /// </summary>
    [pbr::OriginalName("BETAFPV_900_NANO_TX")] Betafpv900NanoTx = 46,
    /// <summary>
    ///
    /// Raspberry Pi Pico (W) with Waveshare SX1262 LoRa Node Module
    /// </summary>
    [pbr::OriginalName("RPI_PICO")] RpiPico = 47,
    /// <summary>
    ///
    /// Heltec Wireless Tracker with ESP32-S3 CPU, built-in GPS, and TFT
    /// Newer V1.1, version is written on the PCB near the display.
    /// </summary>
    [pbr::OriginalName("HELTEC_WIRELESS_TRACKER")] HeltecWirelessTracker = 48,
    /// <summary>
    ///
    /// Heltec Wireless Paper with ESP32-S3 CPU and E-Ink display
    /// </summary>
    [pbr::OriginalName("HELTEC_WIRELESS_PAPER")] HeltecWirelessPaper = 49,
    /// <summary>
    ///
    /// LilyGo T-Deck with ESP32-S3 CPU, Keyboard and IPS display
    /// </summary>
    [pbr::OriginalName("T_DECK")] TDeck = 50,
    /// <summary>
    ///
    /// LilyGo T-Watch S3 with ESP32-S3 CPU and IPS display
    /// </summary>
    [pbr::OriginalName("T_WATCH_S3")] TWatchS3 = 51,
    /// <summary>
    ///
    /// Bobricius Picomputer with ESP32-S3 CPU, Keyboard and IPS display
    /// </summary>
    [pbr::OriginalName("PICOMPUTER_S3")] PicomputerS3 = 52,
    /// <summary>
    ///
    /// Heltec HT-CT62 with ESP32-C3 CPU and SX1262 LoRa
    /// </summary>
    [pbr::OriginalName("HELTEC_HT62")] HeltecHt62 = 53,
    /// <summary>
    ///
    /// EBYTE SPI LoRa module and ESP32-S3
    /// </summary>
    [pbr::OriginalName("EBYTE_ESP32_S3")] EbyteEsp32S3 = 54,
    /// <summary>
    ///
    /// Waveshare ESP32-S3-PICO with PICO LoRa HAT and 2.9inch e-Ink
    /// </summary>
    [pbr::OriginalName("ESP32_S3_PICO")] Esp32S3Pico = 55,
    /// <summary>
    ///
    /// CircuitMess Chatter 2 LLCC68 Lora Module and ESP32 Wroom
    /// Lora module can be swapped out for a Heltec RA-62 which is "almost" pin compatible
    /// with one cut and one jumper Meshtastic works
    /// </summary>
    [pbr::OriginalName("CHATTER_2")] Chatter2 = 56,
    /// <summary>
    ///
    /// Heltec Wireless Paper, With ESP32-S3 CPU and E-Ink display
    /// Older "V1.0" Variant, has no "version sticker"
    /// E-Ink model is DEPG0213BNS800
    /// Tab on the screen protector is RED
    /// Flex connector marking is FPC-7528B
    /// </summary>
    [pbr::OriginalName("HELTEC_WIRELESS_PAPER_V1_0")] HeltecWirelessPaperV10 = 57,
    /// <summary>
    ///
    /// Heltec Wireless Tracker with ESP32-S3 CPU, built-in GPS, and TFT
    /// Older "V1.0" Variant
    /// </summary>
    [pbr::OriginalName("HELTEC_WIRELESS_TRACKER_V1_0")] HeltecWirelessTrackerV10 = 58,
    /// <summary>
    ///
    /// unPhone with ESP32-S3, TFT touchscreen,  LSM6DS3TR-C accelerometer and gyroscope
    /// </summary>
    [pbr::OriginalName("UNPHONE")] Unphone = 59,
    /// <summary>
    ///
    /// Teledatics TD-LORAC NRF52840 based M.2 LoRA module
    /// Compatible with the TD-WRLS development board
    /// </summary>
    [pbr::OriginalName("TD_LORAC")] TdLorac = 60,
    /// <summary>
    ///
    /// CDEBYTE EoRa-S3 board using their own MM modules, clone of LILYGO T3S3
    /// </summary>
    [pbr::OriginalName("CDEBYTE_EORA_S3")] CdebyteEoraS3 = 61,
    /// <summary>
    ///
    /// TWC_MESH_V4 
    /// Adafruit NRF52840 feather express with SX1262, SSD1306 OLED and NEO6M GPS
    /// </summary>
    [pbr::OriginalName("TWC_MESH_V4")] TwcMeshV4 = 62,
    /// <summary>
    ///
    /// NRF52_PROMICRO_DIY
    /// Promicro NRF52840 with SX1262/LLCC68, SSD1306 OLED and NEO6M GPS
    /// </summary>
    [pbr::OriginalName("NRF52_PROMICRO_DIY")] Nrf52PromicroDiy = 63,
    /// <summary>
    ///
    /// RadioMaster 900 Bandit Nano, https://www.radiomasterrc.com/products/bandit-nano-expresslrs-rf-module
    /// ESP32-D0WDQ6 With SX1276/SKY66122, SSD1306 OLED and No GPS
    /// </summary>
    [pbr::OriginalName("RADIOMASTER_900_BANDIT_NANO")] Radiomaster900BanditNano = 64,
    /// <summary>
    ///
    /// Heltec Capsule Sensor V3 with ESP32-S3 CPU, Portable LoRa device that can replace GNSS modules or sensors
    /// </summary>
    [pbr::OriginalName("HELTEC_CAPSULE_SENSOR_V3")] HeltecCapsuleSensorV3 = 65,
    /// <summary>
    ///
    /// Heltec Vision Master T190 with ESP32-S3 CPU, and a 1.90 inch TFT display
    /// </summary>
    [pbr::OriginalName("HELTEC_VISION_MASTER_T190")] HeltecVisionMasterT190 = 66,
    /// <summary>
    ///
    /// Heltec Vision Master E213 with ESP32-S3 CPU, and a 2.13 inch E-Ink display
    /// </summary>
    [pbr::OriginalName("HELTEC_VISION_MASTER_E213")] HeltecVisionMasterE213 = 67,
    /// <summary>
    ///
    /// Heltec Vision Master E290 with ESP32-S3 CPU, and a 2.9 inch E-Ink display
    /// </summary>
    [pbr::OriginalName("HELTEC_VISION_MASTER_E290")] HeltecVisionMasterE290 = 68,
    /// <summary>
    ///
    /// Heltec Mesh Node T114 board with nRF52840 CPU, and a 1.14 inch TFT display, Ultimate low-power design,
    /// specifically adapted for the Meshtatic project
    /// </summary>
    [pbr::OriginalName("HELTEC_MESH_NODE_T114")] HeltecMeshNodeT114 = 69,
    /// <summary>
    ///
    /// Sensecap Indicator from Seeed Studio. ESP32-S3 device with TFT and RP2040 coprocessor
    /// </summary>
    [pbr::OriginalName("SENSECAP_INDICATOR")] SensecapIndicator = 70,
    /// <summary>
    ///
    /// Seeed studio T1000-E tracker card. NRF52840 w/ LR1110 radio, GPS, button, buzzer, and sensors.
    /// </summary>
    [pbr::OriginalName("TRACKER_T1000_E")] TrackerT1000E = 71,
    /// <summary>
    ///
    /// RAK3172 STM32WLE5 Module (https://store.rakwireless.com/products/wisduo-lpwan-module-rak3172)
    /// </summary>
    [pbr::OriginalName("RAK3172")] Rak3172 = 72,
    /// <summary>
    ///
    /// Seeed Studio Wio-E5 (either mini or Dev kit) using STM32WL chip.
    /// </summary>
    [pbr::OriginalName("WIO_E5")] WioE5 = 73,
    /// <summary>
    ///
    /// RadioMaster 900 Bandit, https://www.radiomasterrc.com/products/bandit-expresslrs-rf-module
    /// SSD1306 OLED and No GPS
    /// </summary>
    [pbr::OriginalName("RADIOMASTER_900_BANDIT")] Radiomaster900Bandit = 74,
    /// <summary>
    ///
    /// Minewsemi ME25LS01 (ME25LE01_V1.0). NRF52840 w/ LR1110 radio, buttons and leds and pins.
    /// </summary>
    [pbr::OriginalName("ME25LS01_4Y10TD")] Me25Ls014Y10Td = 75,
    /// <summary>
    ///
    /// RP2040_FEATHER_RFM95
    /// Adafruit Feather RP2040 with RFM95 LoRa Radio RFM95 with SX1272, SSD1306 OLED
    /// https://www.adafruit.com/product/5714
    /// https://www.adafruit.com/product/326
    /// https://www.adafruit.com/product/938
    ///  ^^^ short A0 to switch to I2C address 0x3C
    /// </summary>
    [pbr::OriginalName("RP2040_FEATHER_RFM95")] Rp2040FeatherRfm95 = 76,
    /// <summary>
    /// M5 esp32 based MCU modules with enclosure, TFT and LORA Shields. All Variants (Basic, Core, Fire, Core2, CoreS3, Paper) https://m5stack.com/ 
    /// </summary>
    [pbr::OriginalName("M5STACK_COREBASIC")] M5StackCorebasic = 77,
    [pbr::OriginalName("M5STACK_CORE2")] M5StackCore2 = 78,
    /// <summary>
    /// Pico2 with Waveshare Hat, same as Pico 
    /// </summary>
    [pbr::OriginalName("RPI_PICO2")] RpiPico2 = 79,
    /// <summary>
    /// M5 esp32 based MCU modules with enclosure, TFT and LORA Shields. All Variants (Basic, Core, Fire, Core2, CoreS3, Paper) https://m5stack.com/ 
    /// </summary>
    [pbr::OriginalName("M5STACK_CORES3")] M5StackCores3 = 80,
    /// <summary>
    /// Seeed XIAO S3 DK
    /// </summary>
    [pbr::OriginalName("SEEED_XIAO_S3")] SeeedXiaoS3 = 81,
    /// <summary>
    ///
    /// Nordic nRF52840+Semtech SX1262 LoRa BLE Combo Module. nRF52840+SX1262 MS24SF1
    /// </summary>
    [pbr::OriginalName("MS24SF1")] Ms24Sf1 = 82,
    /// <summary>
    ///
    /// Lilygo TLora-C6 with the new ESP32-C6 MCU
    /// </summary>
    [pbr::OriginalName("TLORA_C6")] TloraC6 = 83,
    /// <summary>
    ///
    /// WisMesh Tap
    /// RAK-4631 w/ TFT in injection modled case
    /// </summary>
    [pbr::OriginalName("WISMESH_TAP")] WismeshTap = 84,
    /// <summary>
    ///
    /// ------------------------------------------------------------------------------------------------------------------------------------------
    /// Reserved ID For developing private Ports. These will show up in live traffic sparsely, so we can use a high number. Keep it within 8 bits.
    /// ------------------------------------------------------------------------------------------------------------------------------------------
    /// </summary>
    [pbr::OriginalName("PRIVATE_HW")] PrivateHw = 255,
  }

  /// <summary>
  ///
  /// Shared constants between device and phone
  /// </summary>
  public enum Constants {
    /// <summary>
    ///
    /// First enum must be zero, and we are just using this enum to
    /// pass int constants between two very different environments
    /// </summary>
    [pbr::OriginalName("ZERO")] Zero = 0,
    /// <summary>
    ///
    /// From mesh.options
    /// note: this payload length is ONLY the bytes that are sent inside of the Data protobuf (excluding protobuf overhead). The 16 byte header is
    /// outside of this envelope
    /// </summary>
    [pbr::OriginalName("DATA_PAYLOAD_LEN")] DataPayloadLen = 233,
  }

  /// <summary>
  ///
  /// Error codes for critical errors
  /// The device might report these fault codes on the screen.
  /// If you encounter a fault code, please post on the meshtastic.discourse.group
  /// and we'll try to help.
  /// </summary>
  public enum CriticalErrorCode {
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    ///
    /// A software bug was detected while trying to send lora
    /// </summary>
    [pbr::OriginalName("TX_WATCHDOG")] TxWatchdog = 1,
    /// <summary>
    ///
    /// A software bug was detected on entry to sleep
    /// </summary>
    [pbr::OriginalName("SLEEP_ENTER_WAIT")] SleepEnterWait = 2,
    /// <summary>
    ///
    /// No Lora radio hardware could be found
    /// </summary>
    [pbr::OriginalName("NO_RADIO")] NoRadio = 3,
    /// <summary>
    ///
    /// Not normally used
    /// </summary>
    [pbr::OriginalName("UNSPECIFIED")] Unspecified = 4,
    /// <summary>
    ///
    /// We failed while configuring a UBlox GPS
    /// </summary>
    [pbr::OriginalName("UBLOX_UNIT_FAILED")] UbloxUnitFailed = 5,
    /// <summary>
    ///
    /// This board was expected to have a power management chip and it is missing or broken
    /// </summary>
    [pbr::OriginalName("NO_AXP192")] NoAxp192 = 6,
    /// <summary>
    ///
    /// The channel tried to set a radio setting which is not supported by this chipset,
    /// radio comms settings are now undefined.
    /// </summary>
    [pbr::OriginalName("INVALID_RADIO_SETTING")] InvalidRadioSetting = 7,
    /// <summary>
    ///
    /// Radio transmit hardware failure. We sent data to the radio chip, but it didn't
    /// reply with an interrupt.
    /// </summary>
    [pbr::OriginalName("TRANSMIT_FAILED")] TransmitFailed = 8,
    /// <summary>
    ///
    /// We detected that the main CPU voltage dropped below the minimum acceptable value
    /// </summary>
    [pbr::OriginalName("BROWNOUT")] Brownout = 9,
    /// <summary>
    /// Selftest of SX1262 radio chip failed 
    /// </summary>
    [pbr::OriginalName("SX1262_FAILURE")] Sx1262Failure = 10,
    /// <summary>
    ///
    /// A (likely software but possibly hardware) failure was detected while trying to send packets.
    /// If this occurs on your board, please post in the forum so that we can ask you to collect some information to allow fixing this bug
    /// </summary>
    [pbr::OriginalName("RADIO_SPI_BUG")] RadioSpiBug = 11,
    /// <summary>
    ///
    /// Corruption was detected on the flash filesystem but we were able to repair things.
    /// If you see this failure in the field please post in the forum because we are interested in seeing if this is occurring in the field.
    /// </summary>
    [pbr::OriginalName("FLASH_CORRUPTION_RECOVERABLE")] FlashCorruptionRecoverable = 12,
    /// <summary>
    ///
    /// Corruption was detected on the flash filesystem but we were unable to repair things.
    /// NOTE: Your node will probably need to be reconfigured the next time it reboots (it will lose the region code etc...)
    /// If you see this failure in the field please post in the forum because we are interested in seeing if this is occurring in the field.
    /// </summary>
    [pbr::OriginalName("FLASH_CORRUPTION_UNRECOVERABLE")] FlashCorruptionUnrecoverable = 13,
  }

  /// <summary>
  ///
  /// Enum for modules excluded from a device's configuration.
  /// Each value represents a ModuleConfigType that can be toggled as excluded
  /// by setting its corresponding bit in the `excluded_modules` bitmask field.
  /// </summary>
  public enum ExcludedModules {
    /// <summary>
    ///
    /// Default value of 0 indicates no modules are excluded.
    /// </summary>
    [pbr::OriginalName("EXCLUDED_NONE")] ExcludedNone = 0,
    /// <summary>
    ///
    /// MQTT module
    /// </summary>
    [pbr::OriginalName("MQTT_CONFIG")] MqttConfig = 1,
    /// <summary>
    ///
    /// Serial module
    /// </summary>
    [pbr::OriginalName("SERIAL_CONFIG")] SerialConfig = 2,
    /// <summary>
    ///
    /// External Notification module
    /// </summary>
    [pbr::OriginalName("EXTNOTIF_CONFIG")] ExtnotifConfig = 4,
    /// <summary>
    ///
    /// Store and Forward module
    /// </summary>
    [pbr::OriginalName("STOREFORWARD_CONFIG")] StoreforwardConfig = 8,
    /// <summary>
    ///
    /// Range Test module
    /// </summary>
    [pbr::OriginalName("RANGETEST_CONFIG")] RangetestConfig = 16,
    /// <summary>
    ///
    /// Telemetry module
    /// </summary>
    [pbr::OriginalName("TELEMETRY_CONFIG")] TelemetryConfig = 32,
    /// <summary>
    ///
    /// Canned Message module
    /// </summary>
    [pbr::OriginalName("CANNEDMSG_CONFIG")] CannedmsgConfig = 64,
    /// <summary>
    ///
    /// Audio module
    /// </summary>
    [pbr::OriginalName("AUDIO_CONFIG")] AudioConfig = 128,
    /// <summary>
    ///
    /// Remote Hardware module
    /// </summary>
    [pbr::OriginalName("REMOTEHARDWARE_CONFIG")] RemotehardwareConfig = 256,
    /// <summary>
    ///
    /// Neighbor Info module
    /// </summary>
    [pbr::OriginalName("NEIGHBORINFO_CONFIG")] NeighborinfoConfig = 512,
    /// <summary>
    ///
    /// Ambient Lighting module
    /// </summary>
    [pbr::OriginalName("AMBIENTLIGHTING_CONFIG")] AmbientlightingConfig = 1024,
    /// <summary>
    ///
    /// Detection Sensor module
    /// </summary>
    [pbr::OriginalName("DETECTIONSENSOR_CONFIG")] DetectionsensorConfig = 2048,
    /// <summary>
    ///
    /// Paxcounter module
    /// </summary>
    [pbr::OriginalName("PAXCOUNTER_CONFIG")] PaxcounterConfig = 4096,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  /// A GPS Position
  /// </summary>
  public sealed partial class Position : pb::IMessage<Position>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Position(Position other) : this() {
      _hasBits0 = other._hasBits0;
      latitudeI_ = other.latitudeI_;
      longitudeI_ = other.longitudeI_;
      altitude_ = other.altitude_;
      time_ = other.time_;
      locationSource_ = other.locationSource_;
      altitudeSource_ = other.altitudeSource_;
      timestamp_ = other.timestamp_;
      timestampMillisAdjust_ = other.timestampMillisAdjust_;
      altitudeHae_ = other.altitudeHae_;
      altitudeGeoidalSeparation_ = other.altitudeGeoidalSeparation_;
      pDOP_ = other.pDOP_;
      hDOP_ = other.hDOP_;
      vDOP_ = other.vDOP_;
      gpsAccuracy_ = other.gpsAccuracy_;
      groundSpeed_ = other.groundSpeed_;
      groundTrack_ = other.groundTrack_;
      fixQuality_ = other.fixQuality_;
      fixType_ = other.fixType_;
      satsInView_ = other.satsInView_;
      sensorId_ = other.sensorId_;
      nextUpdate_ = other.nextUpdate_;
      seqNumber_ = other.seqNumber_;
      precisionBits_ = other.precisionBits_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "latitude_i" field.</summary>
    public const int LatitudeIFieldNumber = 1;
    private int latitudeI_;
    /// <summary>
    ///
    /// The new preferred location encoding, multiply by 1e-7 to get degrees
    /// in floating point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LatitudeI {
      get { if ((_hasBits0 & 1) != 0) { return latitudeI_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        latitudeI_ = value;
      }
    }
    /// <summary>Gets whether the "latitude_i" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLatitudeI {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "latitude_i" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLatitudeI() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "longitude_i" field.</summary>
    public const int LongitudeIFieldNumber = 2;
    private int longitudeI_;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LongitudeI {
      get { if ((_hasBits0 & 2) != 0) { return longitudeI_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        longitudeI_ = value;
      }
    }
    /// <summary>Gets whether the "longitude_i" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLongitudeI {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "longitude_i" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLongitudeI() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 3;
    private int altitude_;
    /// <summary>
    ///
    /// In meters above MSL (but see issue #359)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Altitude {
      get { if ((_hasBits0 & 4) != 0) { return altitude_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        altitude_ = value;
      }
    }
    /// <summary>Gets whether the "altitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAltitude {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "altitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAltitude() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private uint time_;
    /// <summary>
    ///
    /// This is usually not sent over the mesh (to save space), but it is sent
    /// from the phone so that the local device can set its time if it is sent over
    /// the mesh (because there are devices on the mesh without GPS or RTC).
    /// seconds since 1970
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "location_source" field.</summary>
    public const int LocationSourceFieldNumber = 5;
    private global::Meshtastic.Protobufs.Position.Types.LocSource locationSource_ = global::Meshtastic.Protobufs.Position.Types.LocSource.LocUnset;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Position.Types.LocSource LocationSource {
      get { return locationSource_; }
      set {
        locationSource_ = value;
      }
    }

    /// <summary>Field number for the "altitude_source" field.</summary>
    public const int AltitudeSourceFieldNumber = 6;
    private global::Meshtastic.Protobufs.Position.Types.AltSource altitudeSource_ = global::Meshtastic.Protobufs.Position.Types.AltSource.AltUnset;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Position.Types.AltSource AltitudeSource {
      get { return altitudeSource_; }
      set {
        altitudeSource_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private uint timestamp_;
    /// <summary>
    ///
    /// Positional timestamp (actual timestamp of GPS solution) in integer epoch seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_millis_adjust" field.</summary>
    public const int TimestampMillisAdjustFieldNumber = 8;
    private int timestampMillisAdjust_;
    /// <summary>
    ///
    /// Pos. timestamp milliseconds adjustment (rarely available or required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimestampMillisAdjust {
      get { return timestampMillisAdjust_; }
      set {
        timestampMillisAdjust_ = value;
      }
    }

    /// <summary>Field number for the "altitude_hae" field.</summary>
    public const int AltitudeHaeFieldNumber = 9;
    private int altitudeHae_;
    /// <summary>
    ///
    /// HAE altitude in meters - can be used instead of MSL altitude
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AltitudeHae {
      get { if ((_hasBits0 & 8) != 0) { return altitudeHae_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        altitudeHae_ = value;
      }
    }
    /// <summary>Gets whether the "altitude_hae" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAltitudeHae {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "altitude_hae" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAltitudeHae() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "altitude_geoidal_separation" field.</summary>
    public const int AltitudeGeoidalSeparationFieldNumber = 10;
    private int altitudeGeoidalSeparation_;
    /// <summary>
    ///
    /// Geoidal separation in meters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AltitudeGeoidalSeparation {
      get { if ((_hasBits0 & 16) != 0) { return altitudeGeoidalSeparation_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        altitudeGeoidalSeparation_ = value;
      }
    }
    /// <summary>Gets whether the "altitude_geoidal_separation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAltitudeGeoidalSeparation {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "altitude_geoidal_separation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAltitudeGeoidalSeparation() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "PDOP" field.</summary>
    public const int PDOPFieldNumber = 11;
    private uint pDOP_;
    /// <summary>
    ///
    /// Horizontal, Vertical and Position Dilution of Precision, in 1/100 units
    /// - PDOP is sufficient for most cases
    /// - for higher precision scenarios, HDOP and VDOP can be used instead,
    ///   in which case PDOP becomes redundant (PDOP=sqrt(HDOP^2 + VDOP^2))
    /// TODO: REMOVE/INTEGRATE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PDOP {
      get { return pDOP_; }
      set {
        pDOP_ = value;
      }
    }

    /// <summary>Field number for the "HDOP" field.</summary>
    public const int HDOPFieldNumber = 12;
    private uint hDOP_;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HDOP {
      get { return hDOP_; }
      set {
        hDOP_ = value;
      }
    }

    /// <summary>Field number for the "VDOP" field.</summary>
    public const int VDOPFieldNumber = 13;
    private uint vDOP_;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VDOP {
      get { return vDOP_; }
      set {
        vDOP_ = value;
      }
    }

    /// <summary>Field number for the "gps_accuracy" field.</summary>
    public const int GpsAccuracyFieldNumber = 14;
    private uint gpsAccuracy_;
    /// <summary>
    ///
    /// GPS accuracy (a hardware specific constant) in mm
    ///   multiplied with DOP to calculate positional accuracy
    /// Default: "'bout three meters-ish" :)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GpsAccuracy {
      get { return gpsAccuracy_; }
      set {
        gpsAccuracy_ = value;
      }
    }

    /// <summary>Field number for the "ground_speed" field.</summary>
    public const int GroundSpeedFieldNumber = 15;
    private uint groundSpeed_;
    /// <summary>
    ///
    /// Ground speed in m/s and True North TRACK in 1/100 degrees
    /// Clarification of terms:
    /// - "track" is the direction of motion (measured in horizontal plane)
    /// - "heading" is where the fuselage points (measured in horizontal plane)
    /// - "yaw" indicates a relative rotation about the vertical axis
    /// TODO: REMOVE/INTEGRATE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GroundSpeed {
      get { if ((_hasBits0 & 32) != 0) { return groundSpeed_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        groundSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "ground_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroundSpeed {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ground_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroundSpeed() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ground_track" field.</summary>
    public const int GroundTrackFieldNumber = 16;
    private uint groundTrack_;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GroundTrack {
      get { if ((_hasBits0 & 64) != 0) { return groundTrack_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        groundTrack_ = value;
      }
    }
    /// <summary>Gets whether the "ground_track" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroundTrack {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ground_track" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroundTrack() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "fix_quality" field.</summary>
    public const int FixQualityFieldNumber = 17;
    private uint fixQuality_;
    /// <summary>
    ///
    /// GPS fix quality (from NMEA GxGGA statement or similar)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FixQuality {
      get { return fixQuality_; }
      set {
        fixQuality_ = value;
      }
    }

    /// <summary>Field number for the "fix_type" field.</summary>
    public const int FixTypeFieldNumber = 18;
    private uint fixType_;
    /// <summary>
    ///
    /// GPS fix type 2D/3D (from NMEA GxGSA statement)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FixType {
      get { return fixType_; }
      set {
        fixType_ = value;
      }
    }

    /// <summary>Field number for the "sats_in_view" field.</summary>
    public const int SatsInViewFieldNumber = 19;
    private uint satsInView_;
    /// <summary>
    ///
    /// GPS "Satellites in View" number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SatsInView {
      get { return satsInView_; }
      set {
        satsInView_ = value;
      }
    }

    /// <summary>Field number for the "sensor_id" field.</summary>
    public const int SensorIdFieldNumber = 20;
    private uint sensorId_;
    /// <summary>
    ///
    /// Sensor ID - in case multiple positioning sensors are being used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = value;
      }
    }

    /// <summary>Field number for the "next_update" field.</summary>
    public const int NextUpdateFieldNumber = 21;
    private uint nextUpdate_;
    /// <summary>
    ///
    /// Estimated/expected time (in seconds) until next update:
    /// - if we update at fixed intervals of X seconds, use X
    /// - if we update at dynamic intervals (based on relative movement etc),
    ///   but "AT LEAST every Y seconds", use Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NextUpdate {
      get { return nextUpdate_; }
      set {
        nextUpdate_ = value;
      }
    }

    /// <summary>Field number for the "seq_number" field.</summary>
    public const int SeqNumberFieldNumber = 22;
    private uint seqNumber_;
    /// <summary>
    ///
    /// A sequence number, incremented with each Position message to help
    ///   detect lost updates if needed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SeqNumber {
      get { return seqNumber_; }
      set {
        seqNumber_ = value;
      }
    }

    /// <summary>Field number for the "precision_bits" field.</summary>
    public const int PrecisionBitsFieldNumber = 23;
    private uint precisionBits_;
    /// <summary>
    ///
    /// Indicates the bits of precision set by the sending node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PrecisionBits {
      get { return precisionBits_; }
      set {
        precisionBits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LatitudeI != other.LatitudeI) return false;
      if (LongitudeI != other.LongitudeI) return false;
      if (Altitude != other.Altitude) return false;
      if (Time != other.Time) return false;
      if (LocationSource != other.LocationSource) return false;
      if (AltitudeSource != other.AltitudeSource) return false;
      if (Timestamp != other.Timestamp) return false;
      if (TimestampMillisAdjust != other.TimestampMillisAdjust) return false;
      if (AltitudeHae != other.AltitudeHae) return false;
      if (AltitudeGeoidalSeparation != other.AltitudeGeoidalSeparation) return false;
      if (PDOP != other.PDOP) return false;
      if (HDOP != other.HDOP) return false;
      if (VDOP != other.VDOP) return false;
      if (GpsAccuracy != other.GpsAccuracy) return false;
      if (GroundSpeed != other.GroundSpeed) return false;
      if (GroundTrack != other.GroundTrack) return false;
      if (FixQuality != other.FixQuality) return false;
      if (FixType != other.FixType) return false;
      if (SatsInView != other.SatsInView) return false;
      if (SensorId != other.SensorId) return false;
      if (NextUpdate != other.NextUpdate) return false;
      if (SeqNumber != other.SeqNumber) return false;
      if (PrecisionBits != other.PrecisionBits) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLatitudeI) hash ^= LatitudeI.GetHashCode();
      if (HasLongitudeI) hash ^= LongitudeI.GetHashCode();
      if (HasAltitude) hash ^= Altitude.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (LocationSource != global::Meshtastic.Protobufs.Position.Types.LocSource.LocUnset) hash ^= LocationSource.GetHashCode();
      if (AltitudeSource != global::Meshtastic.Protobufs.Position.Types.AltSource.AltUnset) hash ^= AltitudeSource.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (TimestampMillisAdjust != 0) hash ^= TimestampMillisAdjust.GetHashCode();
      if (HasAltitudeHae) hash ^= AltitudeHae.GetHashCode();
      if (HasAltitudeGeoidalSeparation) hash ^= AltitudeGeoidalSeparation.GetHashCode();
      if (PDOP != 0) hash ^= PDOP.GetHashCode();
      if (HDOP != 0) hash ^= HDOP.GetHashCode();
      if (VDOP != 0) hash ^= VDOP.GetHashCode();
      if (GpsAccuracy != 0) hash ^= GpsAccuracy.GetHashCode();
      if (HasGroundSpeed) hash ^= GroundSpeed.GetHashCode();
      if (HasGroundTrack) hash ^= GroundTrack.GetHashCode();
      if (FixQuality != 0) hash ^= FixQuality.GetHashCode();
      if (FixType != 0) hash ^= FixType.GetHashCode();
      if (SatsInView != 0) hash ^= SatsInView.GetHashCode();
      if (SensorId != 0) hash ^= SensorId.GetHashCode();
      if (NextUpdate != 0) hash ^= NextUpdate.GetHashCode();
      if (SeqNumber != 0) hash ^= SeqNumber.GetHashCode();
      if (PrecisionBits != 0) hash ^= PrecisionBits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLatitudeI) {
        output.WriteRawTag(13);
        output.WriteSFixed32(LatitudeI);
      }
      if (HasLongitudeI) {
        output.WriteRawTag(21);
        output.WriteSFixed32(LongitudeI);
      }
      if (HasAltitude) {
        output.WriteRawTag(24);
        output.WriteInt32(Altitude);
      }
      if (Time != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(Time);
      }
      if (LocationSource != global::Meshtastic.Protobufs.Position.Types.LocSource.LocUnset) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LocationSource);
      }
      if (AltitudeSource != global::Meshtastic.Protobufs.Position.Types.AltSource.AltUnset) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AltitudeSource);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(Timestamp);
      }
      if (TimestampMillisAdjust != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TimestampMillisAdjust);
      }
      if (HasAltitudeHae) {
        output.WriteRawTag(72);
        output.WriteSInt32(AltitudeHae);
      }
      if (HasAltitudeGeoidalSeparation) {
        output.WriteRawTag(80);
        output.WriteSInt32(AltitudeGeoidalSeparation);
      }
      if (PDOP != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PDOP);
      }
      if (HDOP != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(HDOP);
      }
      if (VDOP != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(VDOP);
      }
      if (GpsAccuracy != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(GpsAccuracy);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(120);
        output.WriteUInt32(GroundSpeed);
      }
      if (HasGroundTrack) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(GroundTrack);
      }
      if (FixQuality != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(FixQuality);
      }
      if (FixType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(FixType);
      }
      if (SatsInView != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(SatsInView);
      }
      if (SensorId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(SensorId);
      }
      if (NextUpdate != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(NextUpdate);
      }
      if (SeqNumber != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(SeqNumber);
      }
      if (PrecisionBits != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(PrecisionBits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLatitudeI) {
        output.WriteRawTag(13);
        output.WriteSFixed32(LatitudeI);
      }
      if (HasLongitudeI) {
        output.WriteRawTag(21);
        output.WriteSFixed32(LongitudeI);
      }
      if (HasAltitude) {
        output.WriteRawTag(24);
        output.WriteInt32(Altitude);
      }
      if (Time != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(Time);
      }
      if (LocationSource != global::Meshtastic.Protobufs.Position.Types.LocSource.LocUnset) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LocationSource);
      }
      if (AltitudeSource != global::Meshtastic.Protobufs.Position.Types.AltSource.AltUnset) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AltitudeSource);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(Timestamp);
      }
      if (TimestampMillisAdjust != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TimestampMillisAdjust);
      }
      if (HasAltitudeHae) {
        output.WriteRawTag(72);
        output.WriteSInt32(AltitudeHae);
      }
      if (HasAltitudeGeoidalSeparation) {
        output.WriteRawTag(80);
        output.WriteSInt32(AltitudeGeoidalSeparation);
      }
      if (PDOP != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PDOP);
      }
      if (HDOP != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(HDOP);
      }
      if (VDOP != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(VDOP);
      }
      if (GpsAccuracy != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(GpsAccuracy);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(120);
        output.WriteUInt32(GroundSpeed);
      }
      if (HasGroundTrack) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(GroundTrack);
      }
      if (FixQuality != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(FixQuality);
      }
      if (FixType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(FixType);
      }
      if (SatsInView != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(SatsInView);
      }
      if (SensorId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(SensorId);
      }
      if (NextUpdate != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(NextUpdate);
      }
      if (SeqNumber != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(SeqNumber);
      }
      if (PrecisionBits != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(PrecisionBits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLatitudeI) {
        size += 1 + 4;
      }
      if (HasLongitudeI) {
        size += 1 + 4;
      }
      if (HasAltitude) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Altitude);
      }
      if (Time != 0) {
        size += 1 + 4;
      }
      if (LocationSource != global::Meshtastic.Protobufs.Position.Types.LocSource.LocUnset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LocationSource);
      }
      if (AltitudeSource != global::Meshtastic.Protobufs.Position.Types.AltSource.AltUnset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AltitudeSource);
      }
      if (Timestamp != 0) {
        size += 1 + 4;
      }
      if (TimestampMillisAdjust != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimestampMillisAdjust);
      }
      if (HasAltitudeHae) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AltitudeHae);
      }
      if (HasAltitudeGeoidalSeparation) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AltitudeGeoidalSeparation);
      }
      if (PDOP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PDOP);
      }
      if (HDOP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HDOP);
      }
      if (VDOP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VDOP);
      }
      if (GpsAccuracy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GpsAccuracy);
      }
      if (HasGroundSpeed) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroundSpeed);
      }
      if (HasGroundTrack) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GroundTrack);
      }
      if (FixQuality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FixQuality);
      }
      if (FixType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FixType);
      }
      if (SatsInView != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SatsInView);
      }
      if (SensorId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SensorId);
      }
      if (NextUpdate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NextUpdate);
      }
      if (SeqNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumber);
      }
      if (PrecisionBits != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PrecisionBits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.HasLatitudeI) {
        LatitudeI = other.LatitudeI;
      }
      if (other.HasLongitudeI) {
        LongitudeI = other.LongitudeI;
      }
      if (other.HasAltitude) {
        Altitude = other.Altitude;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.LocationSource != global::Meshtastic.Protobufs.Position.Types.LocSource.LocUnset) {
        LocationSource = other.LocationSource;
      }
      if (other.AltitudeSource != global::Meshtastic.Protobufs.Position.Types.AltSource.AltUnset) {
        AltitudeSource = other.AltitudeSource;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.TimestampMillisAdjust != 0) {
        TimestampMillisAdjust = other.TimestampMillisAdjust;
      }
      if (other.HasAltitudeHae) {
        AltitudeHae = other.AltitudeHae;
      }
      if (other.HasAltitudeGeoidalSeparation) {
        AltitudeGeoidalSeparation = other.AltitudeGeoidalSeparation;
      }
      if (other.PDOP != 0) {
        PDOP = other.PDOP;
      }
      if (other.HDOP != 0) {
        HDOP = other.HDOP;
      }
      if (other.VDOP != 0) {
        VDOP = other.VDOP;
      }
      if (other.GpsAccuracy != 0) {
        GpsAccuracy = other.GpsAccuracy;
      }
      if (other.HasGroundSpeed) {
        GroundSpeed = other.GroundSpeed;
      }
      if (other.HasGroundTrack) {
        GroundTrack = other.GroundTrack;
      }
      if (other.FixQuality != 0) {
        FixQuality = other.FixQuality;
      }
      if (other.FixType != 0) {
        FixType = other.FixType;
      }
      if (other.SatsInView != 0) {
        SatsInView = other.SatsInView;
      }
      if (other.SensorId != 0) {
        SensorId = other.SensorId;
      }
      if (other.NextUpdate != 0) {
        NextUpdate = other.NextUpdate;
      }
      if (other.SeqNumber != 0) {
        SeqNumber = other.SeqNumber;
      }
      if (other.PrecisionBits != 0) {
        PrecisionBits = other.PrecisionBits;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            LatitudeI = input.ReadSFixed32();
            break;
          }
          case 21: {
            LongitudeI = input.ReadSFixed32();
            break;
          }
          case 24: {
            Altitude = input.ReadInt32();
            break;
          }
          case 37: {
            Time = input.ReadFixed32();
            break;
          }
          case 40: {
            LocationSource = (global::Meshtastic.Protobufs.Position.Types.LocSource) input.ReadEnum();
            break;
          }
          case 48: {
            AltitudeSource = (global::Meshtastic.Protobufs.Position.Types.AltSource) input.ReadEnum();
            break;
          }
          case 61: {
            Timestamp = input.ReadFixed32();
            break;
          }
          case 64: {
            TimestampMillisAdjust = input.ReadInt32();
            break;
          }
          case 72: {
            AltitudeHae = input.ReadSInt32();
            break;
          }
          case 80: {
            AltitudeGeoidalSeparation = input.ReadSInt32();
            break;
          }
          case 88: {
            PDOP = input.ReadUInt32();
            break;
          }
          case 96: {
            HDOP = input.ReadUInt32();
            break;
          }
          case 104: {
            VDOP = input.ReadUInt32();
            break;
          }
          case 112: {
            GpsAccuracy = input.ReadUInt32();
            break;
          }
          case 120: {
            GroundSpeed = input.ReadUInt32();
            break;
          }
          case 128: {
            GroundTrack = input.ReadUInt32();
            break;
          }
          case 136: {
            FixQuality = input.ReadUInt32();
            break;
          }
          case 144: {
            FixType = input.ReadUInt32();
            break;
          }
          case 152: {
            SatsInView = input.ReadUInt32();
            break;
          }
          case 160: {
            SensorId = input.ReadUInt32();
            break;
          }
          case 168: {
            NextUpdate = input.ReadUInt32();
            break;
          }
          case 176: {
            SeqNumber = input.ReadUInt32();
            break;
          }
          case 184: {
            PrecisionBits = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            LatitudeI = input.ReadSFixed32();
            break;
          }
          case 21: {
            LongitudeI = input.ReadSFixed32();
            break;
          }
          case 24: {
            Altitude = input.ReadInt32();
            break;
          }
          case 37: {
            Time = input.ReadFixed32();
            break;
          }
          case 40: {
            LocationSource = (global::Meshtastic.Protobufs.Position.Types.LocSource) input.ReadEnum();
            break;
          }
          case 48: {
            AltitudeSource = (global::Meshtastic.Protobufs.Position.Types.AltSource) input.ReadEnum();
            break;
          }
          case 61: {
            Timestamp = input.ReadFixed32();
            break;
          }
          case 64: {
            TimestampMillisAdjust = input.ReadInt32();
            break;
          }
          case 72: {
            AltitudeHae = input.ReadSInt32();
            break;
          }
          case 80: {
            AltitudeGeoidalSeparation = input.ReadSInt32();
            break;
          }
          case 88: {
            PDOP = input.ReadUInt32();
            break;
          }
          case 96: {
            HDOP = input.ReadUInt32();
            break;
          }
          case 104: {
            VDOP = input.ReadUInt32();
            break;
          }
          case 112: {
            GpsAccuracy = input.ReadUInt32();
            break;
          }
          case 120: {
            GroundSpeed = input.ReadUInt32();
            break;
          }
          case 128: {
            GroundTrack = input.ReadUInt32();
            break;
          }
          case 136: {
            FixQuality = input.ReadUInt32();
            break;
          }
          case 144: {
            FixType = input.ReadUInt32();
            break;
          }
          case 152: {
            SatsInView = input.ReadUInt32();
            break;
          }
          case 160: {
            SensorId = input.ReadUInt32();
            break;
          }
          case 168: {
            NextUpdate = input.ReadUInt32();
            break;
          }
          case 176: {
            SeqNumber = input.ReadUInt32();
            break;
          }
          case 184: {
            PrecisionBits = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Position message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///
      /// How the location was acquired: manual, onboard GPS, external (EUD) GPS
      /// </summary>
      public enum LocSource {
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("LOC_UNSET")] LocUnset = 0,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("LOC_MANUAL")] LocManual = 1,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("LOC_INTERNAL")] LocInternal = 2,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("LOC_EXTERNAL")] LocExternal = 3,
      }

      /// <summary>
      ///
      /// How the altitude was acquired: manual, GPS int/ext, etc
      /// Default: same as location_source if present
      /// </summary>
      public enum AltSource {
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("ALT_UNSET")] AltUnset = 0,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("ALT_MANUAL")] AltManual = 1,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("ALT_INTERNAL")] AltInternal = 2,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("ALT_EXTERNAL")] AltExternal = 3,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("ALT_BAROMETRIC")] AltBarometric = 4,
      }

    }
    #endregion

  }

  /// <summary>
  ///
  /// Broadcast when a newly powered mesh node wants to find a node num it can use
  /// Sent from the phone over bluetooth to set the user id for the owner of this node.
  /// Also sent from nodes to each other when a new node signs on (so all clients can have this info)
  /// The algorithm is as follows:
  /// when a node starts up, it broadcasts their user and the normal flow is for all
  /// other nodes to reply with their User as well (so the new node can build its nodedb)
  /// If a node ever receives a User (not just the first broadcast) message where
  /// the sender node number equals our node number, that indicates a collision has
  /// occurred and the following steps should happen:
  /// If the receiving node (that was already in the mesh)'s macaddr is LOWER than the
  /// new User who just tried to sign in: it gets to keep its nodenum.
  /// We send a broadcast message of OUR User (we use a broadcast so that the other node can
  /// receive our message, considering we have the same id - it also serves to let
  /// observers correct their nodedb) - this case is rare so it should be okay.
  /// If any node receives a User where the macaddr is GTE than their local macaddr,
  /// they have been vetoed and should pick a new random nodenum (filtering against
  /// whatever it knows about the nodedb) and rebroadcast their User.
  /// A few nodenums are reserved and will never be requested:
  /// 0xff - broadcast
  /// 0 through 3 - for future use
  /// </summary>
  public sealed partial class User : pb::IMessage<User>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public User(User other) : this() {
      id_ = other.id_;
      longName_ = other.longName_;
      shortName_ = other.shortName_;
      macaddr_ = other.macaddr_;
      hwModel_ = other.hwModel_;
      isLicensed_ = other.isLicensed_;
      role_ = other.role_;
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///
    /// A globally unique ID string for this user.
    /// In the case of Signal that would mean +16504442323, for the default macaddr derived id it would be !&lt;8 hexidecimal bytes>.
    /// Note: app developers are encouraged to also use the following standard
    /// node IDs "^all" (for broadcast), "^local" (for the locally connected node)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "long_name" field.</summary>
    public const int LongNameFieldNumber = 2;
    private string longName_ = "";
    /// <summary>
    ///
    /// A full name for this user, i.e. "Kevin Hester"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LongName {
      get { return longName_; }
      set {
        longName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 3;
    private string shortName_ = "";
    /// <summary>
    ///
    /// A VERY short name, ideally two characters.
    /// Suitable for a tiny OLED screen
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShortName {
      get { return shortName_; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "macaddr" field.</summary>
    public const int MacaddrFieldNumber = 4;
    private pb::ByteString macaddr_ = pb::ByteString.Empty;
    /// <summary>
    ///
    /// Deprecated in Meshtastic 2.1.x
    /// This is the addr of the radio.
    /// Not populated by the phone, but added by the esp32 when broadcasting
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Macaddr {
      get { return macaddr_; }
      set {
        macaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hw_model" field.</summary>
    public const int HwModelFieldNumber = 5;
    private global::Meshtastic.Protobufs.HardwareModel hwModel_ = global::Meshtastic.Protobufs.HardwareModel.Unset;
    /// <summary>
    ///
    /// TBEAM, HELTEC, etc...
    /// Starting in 1.2.11 moved to hw_model enum in the NodeInfo object.
    /// Apps will still need the string here for older builds
    /// (so OTA update can find the right image), but if the enum is available it will be used instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.HardwareModel HwModel {
      get { return hwModel_; }
      set {
        hwModel_ = value;
      }
    }

    /// <summary>Field number for the "is_licensed" field.</summary>
    public const int IsLicensedFieldNumber = 6;
    private bool isLicensed_;
    /// <summary>
    ///
    /// In some regions Ham radio operators have different bandwidth limitations than others.
    /// If this user is a licensed operator, set this flag.
    /// Also, "long_name" should be their licence number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLicensed {
      get { return isLicensed_; }
      set {
        isLicensed_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 7;
    private global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role role_ = global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client;
    /// <summary>
    ///
    /// Indicates that the user's role in the mesh
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 8;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///
    /// The public key of the user's device.
    /// This is sent out to other nodes on the mesh to allow them to compute a shared secret key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LongName != other.LongName) return false;
      if (ShortName != other.ShortName) return false;
      if (Macaddr != other.Macaddr) return false;
      if (HwModel != other.HwModel) return false;
      if (IsLicensed != other.IsLicensed) return false;
      if (Role != other.Role) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (LongName.Length != 0) hash ^= LongName.GetHashCode();
      if (ShortName.Length != 0) hash ^= ShortName.GetHashCode();
      if (Macaddr.Length != 0) hash ^= Macaddr.GetHashCode();
      if (HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) hash ^= HwModel.GetHashCode();
      if (IsLicensed != false) hash ^= IsLicensed.GetHashCode();
      if (Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) hash ^= Role.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LongName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LongName);
      }
      if (ShortName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShortName);
      }
      if (Macaddr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Macaddr);
      }
      if (HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) {
        output.WriteRawTag(40);
        output.WriteEnum((int) HwModel);
      }
      if (IsLicensed != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsLicensed);
      }
      if (Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Role);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LongName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LongName);
      }
      if (ShortName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShortName);
      }
      if (Macaddr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Macaddr);
      }
      if (HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) {
        output.WriteRawTag(40);
        output.WriteEnum((int) HwModel);
      }
      if (IsLicensed != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsLicensed);
      }
      if (Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Role);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LongName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongName);
      }
      if (ShortName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (Macaddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Macaddr);
      }
      if (HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HwModel);
      }
      if (IsLicensed != false) {
        size += 1 + 1;
      }
      if (Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.LongName.Length != 0) {
        LongName = other.LongName;
      }
      if (other.ShortName.Length != 0) {
        ShortName = other.ShortName;
      }
      if (other.Macaddr.Length != 0) {
        Macaddr = other.Macaddr;
      }
      if (other.HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) {
        HwModel = other.HwModel;
      }
      if (other.IsLicensed != false) {
        IsLicensed = other.IsLicensed;
      }
      if (other.Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) {
        Role = other.Role;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            LongName = input.ReadString();
            break;
          }
          case 26: {
            ShortName = input.ReadString();
            break;
          }
          case 34: {
            Macaddr = input.ReadBytes();
            break;
          }
          case 40: {
            HwModel = (global::Meshtastic.Protobufs.HardwareModel) input.ReadEnum();
            break;
          }
          case 48: {
            IsLicensed = input.ReadBool();
            break;
          }
          case 56: {
            Role = (global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role) input.ReadEnum();
            break;
          }
          case 66: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            LongName = input.ReadString();
            break;
          }
          case 26: {
            ShortName = input.ReadString();
            break;
          }
          case 34: {
            Macaddr = input.ReadBytes();
            break;
          }
          case 40: {
            HwModel = (global::Meshtastic.Protobufs.HardwareModel) input.ReadEnum();
            break;
          }
          case 48: {
            IsLicensed = input.ReadBool();
            break;
          }
          case 56: {
            Role = (global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role) input.ReadEnum();
            break;
          }
          case 66: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// A message used in a traceroute
  /// </summary>
  public sealed partial class RouteDiscovery : pb::IMessage<RouteDiscovery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RouteDiscovery> _parser = new pb::MessageParser<RouteDiscovery>(() => new RouteDiscovery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RouteDiscovery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RouteDiscovery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RouteDiscovery(RouteDiscovery other) : this() {
      route_ = other.route_.Clone();
      snrTowards_ = other.snrTowards_.Clone();
      routeBack_ = other.routeBack_.Clone();
      snrBack_ = other.snrBack_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RouteDiscovery Clone() {
      return new RouteDiscovery(this);
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_route_codec
        = pb::FieldCodec.ForFixed32(10);
    private readonly pbc::RepeatedField<uint> route_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///
    /// The list of nodenums this packet has visited so far to the destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> Route {
      get { return route_; }
    }

    /// <summary>Field number for the "snr_towards" field.</summary>
    public const int SnrTowardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_snrTowards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> snrTowards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///
    /// The list of SNRs (in dB, scaled by 4) in the route towards the destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SnrTowards {
      get { return snrTowards_; }
    }

    /// <summary>Field number for the "route_back" field.</summary>
    public const int RouteBackFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_routeBack_codec
        = pb::FieldCodec.ForFixed32(26);
    private readonly pbc::RepeatedField<uint> routeBack_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///
    /// The list of nodenums the packet has visited on the way back from the destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> RouteBack {
      get { return routeBack_; }
    }

    /// <summary>Field number for the "snr_back" field.</summary>
    public const int SnrBackFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_snrBack_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> snrBack_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///
    /// The list of SNRs (in dB, scaled by 4) in the route back from the destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SnrBack {
      get { return snrBack_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RouteDiscovery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RouteDiscovery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!route_.Equals(other.route_)) return false;
      if(!snrTowards_.Equals(other.snrTowards_)) return false;
      if(!routeBack_.Equals(other.routeBack_)) return false;
      if(!snrBack_.Equals(other.snrBack_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= route_.GetHashCode();
      hash ^= snrTowards_.GetHashCode();
      hash ^= routeBack_.GetHashCode();
      hash ^= snrBack_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      route_.WriteTo(output, _repeated_route_codec);
      snrTowards_.WriteTo(output, _repeated_snrTowards_codec);
      routeBack_.WriteTo(output, _repeated_routeBack_codec);
      snrBack_.WriteTo(output, _repeated_snrBack_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      route_.WriteTo(ref output, _repeated_route_codec);
      snrTowards_.WriteTo(ref output, _repeated_snrTowards_codec);
      routeBack_.WriteTo(ref output, _repeated_routeBack_codec);
      snrBack_.WriteTo(ref output, _repeated_snrBack_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += route_.CalculateSize(_repeated_route_codec);
      size += snrTowards_.CalculateSize(_repeated_snrTowards_codec);
      size += routeBack_.CalculateSize(_repeated_routeBack_codec);
      size += snrBack_.CalculateSize(_repeated_snrBack_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RouteDiscovery other) {
      if (other == null) {
        return;
      }
      route_.Add(other.route_);
      snrTowards_.Add(other.snrTowards_);
      routeBack_.Add(other.routeBack_);
      snrBack_.Add(other.snrBack_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            route_.AddEntriesFrom(input, _repeated_route_codec);
            break;
          }
          case 18:
          case 16: {
            snrTowards_.AddEntriesFrom(input, _repeated_snrTowards_codec);
            break;
          }
          case 26:
          case 29: {
            routeBack_.AddEntriesFrom(input, _repeated_routeBack_codec);
            break;
          }
          case 34:
          case 32: {
            snrBack_.AddEntriesFrom(input, _repeated_snrBack_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 13: {
            route_.AddEntriesFrom(ref input, _repeated_route_codec);
            break;
          }
          case 18:
          case 16: {
            snrTowards_.AddEntriesFrom(ref input, _repeated_snrTowards_codec);
            break;
          }
          case 26:
          case 29: {
            routeBack_.AddEntriesFrom(ref input, _repeated_routeBack_codec);
            break;
          }
          case 34:
          case 32: {
            snrBack_.AddEntriesFrom(ref input, _repeated_snrBack_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// A Routing control Data packet handled by the routing module
  /// </summary>
  public sealed partial class Routing : pb::IMessage<Routing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Routing> _parser = new pb::MessageParser<Routing>(() => new Routing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Routing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Routing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Routing(Routing other) : this() {
      switch (other.VariantCase) {
        case VariantOneofCase.RouteRequest:
          RouteRequest = other.RouteRequest.Clone();
          break;
        case VariantOneofCase.RouteReply:
          RouteReply = other.RouteReply.Clone();
          break;
        case VariantOneofCase.ErrorReason:
          ErrorReason = other.ErrorReason;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Routing Clone() {
      return new Routing(this);
    }

    /// <summary>Field number for the "route_request" field.</summary>
    public const int RouteRequestFieldNumber = 1;
    /// <summary>
    ///
    /// A route request going from the requester
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.RouteDiscovery RouteRequest {
      get { return variantCase_ == VariantOneofCase.RouteRequest ? (global::Meshtastic.Protobufs.RouteDiscovery) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.RouteRequest;
      }
    }

    /// <summary>Field number for the "route_reply" field.</summary>
    public const int RouteReplyFieldNumber = 2;
    /// <summary>
    ///
    /// A route reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.RouteDiscovery RouteReply {
      get { return variantCase_ == VariantOneofCase.RouteReply ? (global::Meshtastic.Protobufs.RouteDiscovery) variant_ : null; }
      set {
        variant_ = value;
        variantCase_ = value == null ? VariantOneofCase.None : VariantOneofCase.RouteReply;
      }
    }

    /// <summary>Field number for the "error_reason" field.</summary>
    public const int ErrorReasonFieldNumber = 3;
    /// <summary>
    ///
    /// A failure in delivering a message (usually used for routing control messages, but might be provided
    /// in addition to ack.fail_id to provide details on the type of failure).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Routing.Types.Error ErrorReason {
      get { return variantCase_ == VariantOneofCase.ErrorReason ? (global::Meshtastic.Protobufs.Routing.Types.Error) variant_ : global::Meshtastic.Protobufs.Routing.Types.Error.None; }
      set {
        variant_ = value;
        variantCase_ = VariantOneofCase.ErrorReason;
      }
    }

    private object variant_;
    /// <summary>Enum of possible cases for the "variant" oneof.</summary>
    public enum VariantOneofCase {
      None = 0,
      RouteRequest = 1,
      RouteReply = 2,
      ErrorReason = 3,
    }
    private VariantOneofCase variantCase_ = VariantOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VariantOneofCase VariantCase {
      get { return variantCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVariant() {
      variantCase_ = VariantOneofCase.None;
      variant_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Routing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Routing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RouteRequest, other.RouteRequest)) return false;
      if (!object.Equals(RouteReply, other.RouteReply)) return false;
      if (ErrorReason != other.ErrorReason) return false;
      if (VariantCase != other.VariantCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (variantCase_ == VariantOneofCase.RouteRequest) hash ^= RouteRequest.GetHashCode();
      if (variantCase_ == VariantOneofCase.RouteReply) hash ^= RouteReply.GetHashCode();
      if (variantCase_ == VariantOneofCase.ErrorReason) hash ^= ErrorReason.GetHashCode();
      hash ^= (int) variantCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (variantCase_ == VariantOneofCase.RouteRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(RouteRequest);
      }
      if (variantCase_ == VariantOneofCase.RouteReply) {
        output.WriteRawTag(18);
        output.WriteMessage(RouteReply);
      }
      if (variantCase_ == VariantOneofCase.ErrorReason) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ErrorReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (variantCase_ == VariantOneofCase.RouteRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(RouteRequest);
      }
      if (variantCase_ == VariantOneofCase.RouteReply) {
        output.WriteRawTag(18);
        output.WriteMessage(RouteReply);
      }
      if (variantCase_ == VariantOneofCase.ErrorReason) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ErrorReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (variantCase_ == VariantOneofCase.RouteRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RouteRequest);
      }
      if (variantCase_ == VariantOneofCase.RouteReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RouteReply);
      }
      if (variantCase_ == VariantOneofCase.ErrorReason) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorReason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Routing other) {
      if (other == null) {
        return;
      }
      switch (other.VariantCase) {
        case VariantOneofCase.RouteRequest:
          if (RouteRequest == null) {
            RouteRequest = new global::Meshtastic.Protobufs.RouteDiscovery();
          }
          RouteRequest.MergeFrom(other.RouteRequest);
          break;
        case VariantOneofCase.RouteReply:
          if (RouteReply == null) {
            RouteReply = new global::Meshtastic.Protobufs.RouteDiscovery();
          }
          RouteReply.MergeFrom(other.RouteReply);
          break;
        case VariantOneofCase.ErrorReason:
          ErrorReason = other.ErrorReason;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Meshtastic.Protobufs.RouteDiscovery subBuilder = new global::Meshtastic.Protobufs.RouteDiscovery();
            if (variantCase_ == VariantOneofCase.RouteRequest) {
              subBuilder.MergeFrom(RouteRequest);
            }
            input.ReadMessage(subBuilder);
            RouteRequest = subBuilder;
            break;
          }
          case 18: {
            global::Meshtastic.Protobufs.RouteDiscovery subBuilder = new global::Meshtastic.Protobufs.RouteDiscovery();
            if (variantCase_ == VariantOneofCase.RouteReply) {
              subBuilder.MergeFrom(RouteReply);
            }
            input.ReadMessage(subBuilder);
            RouteReply = subBuilder;
            break;
          }
          case 24: {
            variant_ = input.ReadEnum();
            variantCase_ = VariantOneofCase.ErrorReason;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Meshtastic.Protobufs.RouteDiscovery subBuilder = new global::Meshtastic.Protobufs.RouteDiscovery();
            if (variantCase_ == VariantOneofCase.RouteRequest) {
              subBuilder.MergeFrom(RouteRequest);
            }
            input.ReadMessage(subBuilder);
            RouteRequest = subBuilder;
            break;
          }
          case 18: {
            global::Meshtastic.Protobufs.RouteDiscovery subBuilder = new global::Meshtastic.Protobufs.RouteDiscovery();
            if (variantCase_ == VariantOneofCase.RouteReply) {
              subBuilder.MergeFrom(RouteReply);
            }
            input.ReadMessage(subBuilder);
            RouteReply = subBuilder;
            break;
          }
          case 24: {
            variant_ = input.ReadEnum();
            variantCase_ = VariantOneofCase.ErrorReason;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Routing message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///
      /// A failure in delivering a message (usually used for routing control messages, but might be provided in addition to ack.fail_id to provide
      /// details on the type of failure).
      /// </summary>
      public enum Error {
        /// <summary>
        ///
        /// This message is not a failure
        /// </summary>
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        ///
        /// Our node doesn't have a route to the requested destination anymore.
        /// </summary>
        [pbr::OriginalName("NO_ROUTE")] NoRoute = 1,
        /// <summary>
        ///
        /// We received a nak while trying to forward on your behalf
        /// </summary>
        [pbr::OriginalName("GOT_NAK")] GotNak = 2,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("TIMEOUT")] Timeout = 3,
        /// <summary>
        ///
        /// No suitable interface could be found for delivering this packet
        /// </summary>
        [pbr::OriginalName("NO_INTERFACE")] NoInterface = 4,
        /// <summary>
        ///
        /// We reached the max retransmission count (typically for naive flood routing)
        /// </summary>
        [pbr::OriginalName("MAX_RETRANSMIT")] MaxRetransmit = 5,
        /// <summary>
        ///
        /// No suitable channel was found for sending this packet (i.e. was requested channel index disabled?)
        /// </summary>
        [pbr::OriginalName("NO_CHANNEL")] NoChannel = 6,
        /// <summary>
        ///
        /// The packet was too big for sending (exceeds interface MTU after encoding)
        /// </summary>
        [pbr::OriginalName("TOO_LARGE")] TooLarge = 7,
        /// <summary>
        ///
        /// The request had want_response set, the request reached the destination node, but no service on that node wants to send a response
        /// (possibly due to bad channel permissions)
        /// </summary>
        [pbr::OriginalName("NO_RESPONSE")] NoResponse = 8,
        /// <summary>
        ///
        /// Cannot send currently because duty cycle regulations will be violated.
        /// </summary>
        [pbr::OriginalName("DUTY_CYCLE_LIMIT")] DutyCycleLimit = 9,
        /// <summary>
        ///
        /// The application layer service on the remote node received your request, but considered your request somehow invalid
        /// </summary>
        [pbr::OriginalName("BAD_REQUEST")] BadRequest = 32,
        /// <summary>
        ///
        /// The application layer service on the remote node received your request, but considered your request not authorized
        /// (i.e you did not send the request on the required bound channel)
        /// </summary>
        [pbr::OriginalName("NOT_AUTHORIZED")] NotAuthorized = 33,
        /// <summary>
        ///
        /// The client specified a PKI transport, but the node was unable to send the packet using PKI (and did not send the message at all)
        /// </summary>
        [pbr::OriginalName("PKI_FAILED")] PkiFailed = 34,
        /// <summary>
        ///
        /// The receiving node does not have a Public Key to decode with
        /// </summary>
        [pbr::OriginalName("PKI_UNKNOWN_PUBKEY")] PkiUnknownPubkey = 35,
        /// <summary>
        ///
        /// Admin packet otherwise checks out, but uses a bogus or expired session key
        /// </summary>
        [pbr::OriginalName("ADMIN_BAD_SESSION_KEY")] AdminBadSessionKey = 36,
        /// <summary>
        ///
        /// Admin packet sent using PKC, but not from a public key on the admin key list
        /// </summary>
        [pbr::OriginalName("ADMIN_PUBLIC_KEY_UNAUTHORIZED")] AdminPublicKeyUnauthorized = 37,
      }

    }
    #endregion

  }

  /// <summary>
  ///
  /// (Formerly called SubPacket)
  /// The payload portion fo a packet, this is the actual bytes that are sent
  /// inside a radio packet (because from/to are broken out by the comms library)
  /// </summary>
  public sealed partial class Data : pb::IMessage<Data>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Data(Data other) : this() {
      _hasBits0 = other._hasBits0;
      portnum_ = other.portnum_;
      payload_ = other.payload_;
      wantResponse_ = other.wantResponse_;
      dest_ = other.dest_;
      source_ = other.source_;
      requestId_ = other.requestId_;
      replyId_ = other.replyId_;
      emoji_ = other.emoji_;
      bitfield_ = other.bitfield_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Data Clone() {
      return new Data(this);
    }

    /// <summary>Field number for the "portnum" field.</summary>
    public const int PortnumFieldNumber = 1;
    private global::Meshtastic.Protobufs.PortNum portnum_ = global::Meshtastic.Protobufs.PortNum.UnknownApp;
    /// <summary>
    ///
    /// Formerly named typ and of type Type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.PortNum Portnum {
      get { return portnum_; }
      set {
        portnum_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "want_response" field.</summary>
    public const int WantResponseFieldNumber = 3;
    private bool wantResponse_;
    /// <summary>
    ///
    /// Not normally used, but for testing a sender can request that recipient
    /// responds in kind (i.e. if it received a position, it should unicast back it's position).
    /// Note: that if you set this on a broadcast you will receive many replies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WantResponse {
      get { return wantResponse_; }
      set {
        wantResponse_ = value;
      }
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 4;
    private uint dest_;
    /// <summary>
    ///
    /// The address of the destination node.
    /// This field is is filled in by the mesh radio device software, application
    /// layer software should never need it.
    /// RouteDiscovery messages _must_ populate this.
    /// Other message types might need to if they are doing multihop routing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Dest {
      get { return dest_; }
      set {
        dest_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 5;
    private uint source_;
    /// <summary>
    ///
    /// The address of the original sender for this message.
    /// This field should _only_ be populated for reliable multihop packets (to keep
    /// packets small).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 6;
    private uint requestId_;
    /// <summary>
    ///
    /// Only used in routing or response messages.
    /// Indicates the original message ID that this message is reporting failure on. (formerly called original_id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "reply_id" field.</summary>
    public const int ReplyIdFieldNumber = 7;
    private uint replyId_;
    /// <summary>
    ///
    /// If set, this message is intened to be a reply to a previously sent message with the defined id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ReplyId {
      get { return replyId_; }
      set {
        replyId_ = value;
      }
    }

    /// <summary>Field number for the "emoji" field.</summary>
    public const int EmojiFieldNumber = 8;
    private uint emoji_;
    /// <summary>
    ///
    /// Defaults to false. If true, then what is in the payload should be treated as an emoji like giving
    /// a message a heart or poop emoji.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Emoji {
      get { return emoji_; }
      set {
        emoji_ = value;
      }
    }

    /// <summary>Field number for the "bitfield" field.</summary>
    public const int BitfieldFieldNumber = 9;
    private uint bitfield_;
    /// <summary>
    ///
    /// Bitfield for extra flags. First use is to indicate that user approves the packet being uploaded to MQTT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Bitfield {
      get { if ((_hasBits0 & 1) != 0) { return bitfield_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        bitfield_ = value;
      }
    }
    /// <summary>Gets whether the "bitfield" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBitfield {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bitfield" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBitfield() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Portnum != other.Portnum) return false;
      if (Payload != other.Payload) return false;
      if (WantResponse != other.WantResponse) return false;
      if (Dest != other.Dest) return false;
      if (Source != other.Source) return false;
      if (RequestId != other.RequestId) return false;
      if (ReplyId != other.ReplyId) return false;
      if (Emoji != other.Emoji) return false;
      if (Bitfield != other.Bitfield) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) hash ^= Portnum.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (WantResponse != false) hash ^= WantResponse.GetHashCode();
      if (Dest != 0) hash ^= Dest.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (ReplyId != 0) hash ^= ReplyId.GetHashCode();
      if (Emoji != 0) hash ^= Emoji.GetHashCode();
      if (HasBitfield) hash ^= Bitfield.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Portnum);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (WantResponse != false) {
        output.WriteRawTag(24);
        output.WriteBool(WantResponse);
      }
      if (Dest != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(Dest);
      }
      if (Source != 0) {
        output.WriteRawTag(45);
        output.WriteFixed32(Source);
      }
      if (RequestId != 0) {
        output.WriteRawTag(53);
        output.WriteFixed32(RequestId);
      }
      if (ReplyId != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(ReplyId);
      }
      if (Emoji != 0) {
        output.WriteRawTag(69);
        output.WriteFixed32(Emoji);
      }
      if (HasBitfield) {
        output.WriteRawTag(72);
        output.WriteUInt32(Bitfield);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Portnum);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (WantResponse != false) {
        output.WriteRawTag(24);
        output.WriteBool(WantResponse);
      }
      if (Dest != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(Dest);
      }
      if (Source != 0) {
        output.WriteRawTag(45);
        output.WriteFixed32(Source);
      }
      if (RequestId != 0) {
        output.WriteRawTag(53);
        output.WriteFixed32(RequestId);
      }
      if (ReplyId != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(ReplyId);
      }
      if (Emoji != 0) {
        output.WriteRawTag(69);
        output.WriteFixed32(Emoji);
      }
      if (HasBitfield) {
        output.WriteRawTag(72);
        output.WriteUInt32(Bitfield);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Portnum);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (WantResponse != false) {
        size += 1 + 1;
      }
      if (Dest != 0) {
        size += 1 + 4;
      }
      if (Source != 0) {
        size += 1 + 4;
      }
      if (RequestId != 0) {
        size += 1 + 4;
      }
      if (ReplyId != 0) {
        size += 1 + 4;
      }
      if (Emoji != 0) {
        size += 1 + 4;
      }
      if (HasBitfield) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bitfield);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Data other) {
      if (other == null) {
        return;
      }
      if (other.Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) {
        Portnum = other.Portnum;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.WantResponse != false) {
        WantResponse = other.WantResponse;
      }
      if (other.Dest != 0) {
        Dest = other.Dest;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      if (other.ReplyId != 0) {
        ReplyId = other.ReplyId;
      }
      if (other.Emoji != 0) {
        Emoji = other.Emoji;
      }
      if (other.HasBitfield) {
        Bitfield = other.Bitfield;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Portnum = (global::Meshtastic.Protobufs.PortNum) input.ReadEnum();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 24: {
            WantResponse = input.ReadBool();
            break;
          }
          case 37: {
            Dest = input.ReadFixed32();
            break;
          }
          case 45: {
            Source = input.ReadFixed32();
            break;
          }
          case 53: {
            RequestId = input.ReadFixed32();
            break;
          }
          case 61: {
            ReplyId = input.ReadFixed32();
            break;
          }
          case 69: {
            Emoji = input.ReadFixed32();
            break;
          }
          case 72: {
            Bitfield = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Portnum = (global::Meshtastic.Protobufs.PortNum) input.ReadEnum();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 24: {
            WantResponse = input.ReadBool();
            break;
          }
          case 37: {
            Dest = input.ReadFixed32();
            break;
          }
          case 45: {
            Source = input.ReadFixed32();
            break;
          }
          case 53: {
            RequestId = input.ReadFixed32();
            break;
          }
          case 61: {
            ReplyId = input.ReadFixed32();
            break;
          }
          case 69: {
            Emoji = input.ReadFixed32();
            break;
          }
          case 72: {
            Bitfield = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Waypoint message, used to share arbitrary locations across the mesh
  /// </summary>
  public sealed partial class Waypoint : pb::IMessage<Waypoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Waypoint> _parser = new pb::MessageParser<Waypoint>(() => new Waypoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Waypoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Waypoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Waypoint(Waypoint other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      latitudeI_ = other.latitudeI_;
      longitudeI_ = other.longitudeI_;
      expire_ = other.expire_;
      lockedTo_ = other.lockedTo_;
      name_ = other.name_;
      description_ = other.description_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Waypoint Clone() {
      return new Waypoint(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///
    /// Id of the waypoint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "latitude_i" field.</summary>
    public const int LatitudeIFieldNumber = 2;
    private int latitudeI_;
    /// <summary>
    ///
    /// latitude_i
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LatitudeI {
      get { if ((_hasBits0 & 1) != 0) { return latitudeI_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        latitudeI_ = value;
      }
    }
    /// <summary>Gets whether the "latitude_i" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLatitudeI {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "latitude_i" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLatitudeI() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "longitude_i" field.</summary>
    public const int LongitudeIFieldNumber = 3;
    private int longitudeI_;
    /// <summary>
    ///
    /// longitude_i
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LongitudeI {
      get { if ((_hasBits0 & 2) != 0) { return longitudeI_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        longitudeI_ = value;
      }
    }
    /// <summary>Gets whether the "longitude_i" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLongitudeI {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "longitude_i" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLongitudeI() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "expire" field.</summary>
    public const int ExpireFieldNumber = 4;
    private uint expire_;
    /// <summary>
    ///
    /// Time the waypoint is to expire (epoch)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Expire {
      get { return expire_; }
      set {
        expire_ = value;
      }
    }

    /// <summary>Field number for the "locked_to" field.</summary>
    public const int LockedToFieldNumber = 5;
    private uint lockedTo_;
    /// <summary>
    ///
    /// If greater than zero, treat the value as a nodenum only allowing them to update the waypoint.
    /// If zero, the waypoint is open to be edited by any member of the mesh.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LockedTo {
      get { return lockedTo_; }
      set {
        lockedTo_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    ///
    /// Name of the waypoint - max 30 chars
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    /// <summary>
    ///
    /// Description of the waypoint - max 100 chars
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 8;
    private uint icon_;
    /// <summary>
    ///
    /// Designator icon for the waypoint in the form of a unicode emoji
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Waypoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Waypoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LatitudeI != other.LatitudeI) return false;
      if (LongitudeI != other.LongitudeI) return false;
      if (Expire != other.Expire) return false;
      if (LockedTo != other.LockedTo) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (HasLatitudeI) hash ^= LatitudeI.GetHashCode();
      if (HasLongitudeI) hash ^= LongitudeI.GetHashCode();
      if (Expire != 0) hash ^= Expire.GetHashCode();
      if (LockedTo != 0) hash ^= LockedTo.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasLatitudeI) {
        output.WriteRawTag(21);
        output.WriteSFixed32(LatitudeI);
      }
      if (HasLongitudeI) {
        output.WriteRawTag(29);
        output.WriteSFixed32(LongitudeI);
      }
      if (Expire != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Expire);
      }
      if (LockedTo != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LockedTo);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (Icon != 0) {
        output.WriteRawTag(69);
        output.WriteFixed32(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasLatitudeI) {
        output.WriteRawTag(21);
        output.WriteSFixed32(LatitudeI);
      }
      if (HasLongitudeI) {
        output.WriteRawTag(29);
        output.WriteSFixed32(LongitudeI);
      }
      if (Expire != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Expire);
      }
      if (LockedTo != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LockedTo);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (Icon != 0) {
        output.WriteRawTag(69);
        output.WriteFixed32(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasLatitudeI) {
        size += 1 + 4;
      }
      if (HasLongitudeI) {
        size += 1 + 4;
      }
      if (Expire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expire);
      }
      if (LockedTo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LockedTo);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Icon != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Waypoint other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.HasLatitudeI) {
        LatitudeI = other.LatitudeI;
      }
      if (other.HasLongitudeI) {
        LongitudeI = other.LongitudeI;
      }
      if (other.Expire != 0) {
        Expire = other.Expire;
      }
      if (other.LockedTo != 0) {
        LockedTo = other.LockedTo;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 21: {
            LatitudeI = input.ReadSFixed32();
            break;
          }
          case 29: {
            LongitudeI = input.ReadSFixed32();
            break;
          }
          case 32: {
            Expire = input.ReadUInt32();
            break;
          }
          case 40: {
            LockedTo = input.ReadUInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 69: {
            Icon = input.ReadFixed32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 21: {
            LatitudeI = input.ReadSFixed32();
            break;
          }
          case 29: {
            LongitudeI = input.ReadSFixed32();
            break;
          }
          case 32: {
            Expire = input.ReadUInt32();
            break;
          }
          case 40: {
            LockedTo = input.ReadUInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 69: {
            Icon = input.ReadFixed32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// This message will be proxied over the PhoneAPI for the client to deliver to the MQTT server
  /// </summary>
  public sealed partial class MqttClientProxyMessage : pb::IMessage<MqttClientProxyMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MqttClientProxyMessage> _parser = new pb::MessageParser<MqttClientProxyMessage>(() => new MqttClientProxyMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MqttClientProxyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MqttClientProxyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MqttClientProxyMessage(MqttClientProxyMessage other) : this() {
      topic_ = other.topic_;
      retained_ = other.retained_;
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.Data:
          Data = other.Data;
          break;
        case PayloadVariantOneofCase.Text:
          Text = other.Text;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MqttClientProxyMessage Clone() {
      return new MqttClientProxyMessage(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private string topic_ = "";
    /// <summary>
    ///
    /// The MQTT topic this message will be sent /received on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    /// <summary>
    ///
    /// Bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Data {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Data ? (pb::ByteString) payloadVariant_ : pb::ByteString.Empty; }
      set {
        payloadVariant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadVariantCase_ = PayloadVariantOneofCase.Data;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    /// <summary>
    ///
    /// Text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Text {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Text ? (string) payloadVariant_ : ""; }
      set {
        payloadVariant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadVariantCase_ = PayloadVariantOneofCase.Text;
      }
    }

    /// <summary>Field number for the "retained" field.</summary>
    public const int RetainedFieldNumber = 4;
    private bool retained_;
    /// <summary>
    ///
    /// Whether the message should be retained (or not)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Retained {
      get { return retained_; }
      set {
        retained_ = value;
      }
    }

    private object payloadVariant_;
    /// <summary>Enum of possible cases for the "payload_variant" oneof.</summary>
    public enum PayloadVariantOneofCase {
      None = 0,
      Data = 2,
      Text = 3,
    }
    private PayloadVariantOneofCase payloadVariantCase_ = PayloadVariantOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PayloadVariantOneofCase PayloadVariantCase {
      get { return payloadVariantCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPayloadVariant() {
      payloadVariantCase_ = PayloadVariantOneofCase.None;
      payloadVariant_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MqttClientProxyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MqttClientProxyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (Data != other.Data) return false;
      if (Text != other.Text) return false;
      if (Retained != other.Retained) return false;
      if (PayloadVariantCase != other.PayloadVariantCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Data) hash ^= Data.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Text) hash ^= Text.GetHashCode();
      if (Retained != false) hash ^= Retained.GetHashCode();
      hash ^= (int) payloadVariantCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Text) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (Retained != false) {
        output.WriteRawTag(32);
        output.WriteBool(Retained);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Text) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (Retained != false) {
        output.WriteRawTag(32);
        output.WriteBool(Retained);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Retained != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MqttClientProxyMessage other) {
      if (other == null) {
        return;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.Retained != false) {
        Retained = other.Retained;
      }
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.Data:
          Data = other.Data;
          break;
        case PayloadVariantOneofCase.Text:
          Text = other.Text;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 32: {
            Retained = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 32: {
            Retained = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// A packet envelope sent/received over the mesh
  /// only payload_variant is sent in the payload portion of the LORA packet.
  /// The other fields are either not sent at all, or sent in the special 16 byte LORA header.
  /// </summary>
  public sealed partial class MeshPacket : pb::IMessage<MeshPacket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MeshPacket> _parser = new pb::MessageParser<MeshPacket>(() => new MeshPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MeshPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeshPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeshPacket(MeshPacket other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      channel_ = other.channel_;
      id_ = other.id_;
      rxTime_ = other.rxTime_;
      rxSnr_ = other.rxSnr_;
      hopLimit_ = other.hopLimit_;
      wantAck_ = other.wantAck_;
      priority_ = other.priority_;
      rxRssi_ = other.rxRssi_;
      delayed_ = other.delayed_;
      viaMqtt_ = other.viaMqtt_;
      hopStart_ = other.hopStart_;
      publicKey_ = other.publicKey_;
      pkiEncrypted_ = other.pkiEncrypted_;
      nextHop_ = other.nextHop_;
      relayNode_ = other.relayNode_;
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.Decoded:
          Decoded = other.Decoded.Clone();
          break;
        case PayloadVariantOneofCase.Encrypted:
          Encrypted = other.Encrypted;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MeshPacket Clone() {
      return new MeshPacket(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private uint from_;
    /// <summary>
    ///
    /// The sending node number.
    /// Note: Our crypto implementation uses this field as well.
    /// See [crypto](/docs/overview/encryption) for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private uint to_;
    /// <summary>
    ///
    /// The (immediate) destination for this packet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private uint channel_;
    /// <summary>
    ///
    /// (Usually) If set, this indicates the index in the secondary_channels table that this packet was sent/received on.
    /// If unset, packet was on the primary channel.
    /// A particular node might know only a subset of channels in use on the mesh.
    /// Therefore channel_index is inherently a local concept and meaningless to send between nodes.
    /// Very briefly, while sending and receiving deep inside the device Router code, this field instead
    /// contains the 'channel hash' instead of the index.
    /// This 'trick' is only used while the payload_variant is an 'encrypted'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "decoded" field.</summary>
    public const int DecodedFieldNumber = 4;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Data Decoded {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Decoded ? (global::Meshtastic.Protobufs.Data) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.Decoded;
      }
    }

    /// <summary>Field number for the "encrypted" field.</summary>
    public const int EncryptedFieldNumber = 5;
    /// <summary>
    ///
    /// TODO: REPLACE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Encrypted {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Encrypted ? (pb::ByteString) payloadVariant_ : pb::ByteString.Empty; }
      set {
        payloadVariant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadVariantCase_ = PayloadVariantOneofCase.Encrypted;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 6;
    private uint id_;
    /// <summary>
    ///
    /// A unique ID for this packet.
    /// Always 0 for no-ack packets or non broadcast packets (and therefore take zero bytes of space).
    /// Otherwise a unique ID for this packet, useful for flooding algorithms.
    /// ID only needs to be unique on a _per sender_ basis, and it only
    /// needs to be unique for a few minutes (long enough to last for the length of
    /// any ACK or the completion of a mesh broadcast flood).
    /// Note: Our crypto implementation uses this id as well.
    /// See [crypto](/docs/overview/encryption) for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rx_time" field.</summary>
    public const int RxTimeFieldNumber = 7;
    private uint rxTime_;
    /// <summary>
    ///
    /// The time this message was received by the esp32 (secs since 1970).
    /// Note: this field is _never_ sent on the radio link itself (to save space) Times
    /// are typically not sent over the mesh, but they will be added to any Packet
    /// (chain of SubPacket) sent to the phone (so the phone can know exact time of reception)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RxTime {
      get { return rxTime_; }
      set {
        rxTime_ = value;
      }
    }

    /// <summary>Field number for the "rx_snr" field.</summary>
    public const int RxSnrFieldNumber = 8;
    private float rxSnr_;
    /// <summary>
    ///
    /// *Never* sent over the radio links.
    /// Set during reception to indicate the SNR of this packet.
    /// Used to collect statistics on current link quality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RxSnr {
      get { return rxSnr_; }
      set {
        rxSnr_ = value;
      }
    }

    /// <summary>Field number for the "hop_limit" field.</summary>
    public const int HopLimitFieldNumber = 9;
    private uint hopLimit_;
    /// <summary>
    ///
    /// If unset treated as zero (no forwarding, send to direct neighbor nodes only)
    /// if 1, allow hopping through one node, etc...
    /// For our usecase real world topologies probably have a max of about 3.
    /// This field is normally placed into a few of bits in the header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HopLimit {
      get { return hopLimit_; }
      set {
        hopLimit_ = value;
      }
    }

    /// <summary>Field number for the "want_ack" field.</summary>
    public const int WantAckFieldNumber = 10;
    private bool wantAck_;
    /// <summary>
    ///
    /// This packet is being sent as a reliable message, we would prefer it to arrive at the destination.
    /// We would like to receive a ack packet in response.
    /// Broadcasts messages treat this flag specially: Since acks for broadcasts would
    /// rapidly flood the channel, the normal ack behavior is suppressed.
    /// Instead, the original sender listens to see if at least one node is rebroadcasting this packet (because naive flooding algorithm).
    /// If it hears that the odds (given typical LoRa topologies) the odds are very high that every node should eventually receive the message.
    /// So FloodingRouter.cpp generates an implicit ack which is delivered to the original sender.
    /// If after some time we don't hear anyone rebroadcast our packet, we will timeout and retransmit, using the regular resend logic.
    /// Note: This flag is normally sent in a flag bit in the header when sent over the wire
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WantAck {
      get { return wantAck_; }
      set {
        wantAck_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 11;
    private global::Meshtastic.Protobufs.MeshPacket.Types.Priority priority_ = global::Meshtastic.Protobufs.MeshPacket.Types.Priority.Unset;
    /// <summary>
    ///
    /// The priority of this message for sending.
    /// See MeshPacket.Priority description for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.MeshPacket.Types.Priority Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "rx_rssi" field.</summary>
    public const int RxRssiFieldNumber = 12;
    private int rxRssi_;
    /// <summary>
    ///
    /// rssi of received packet. Only sent to phone for dispay purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RxRssi {
      get { return rxRssi_; }
      set {
        rxRssi_ = value;
      }
    }

    /// <summary>Field number for the "delayed" field.</summary>
    public const int DelayedFieldNumber = 13;
    private global::Meshtastic.Protobufs.MeshPacket.Types.Delayed delayed_ = global::Meshtastic.Protobufs.MeshPacket.Types.Delayed.NoDelay;
    /// <summary>
    ///
    /// Describe if this message is delayed
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.MeshPacket.Types.Delayed Delayed {
      get { return delayed_; }
      set {
        delayed_ = value;
      }
    }

    /// <summary>Field number for the "via_mqtt" field.</summary>
    public const int ViaMqttFieldNumber = 14;
    private bool viaMqtt_;
    /// <summary>
    ///
    /// Describes whether this packet passed via MQTT somewhere along the path it currently took.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ViaMqtt {
      get { return viaMqtt_; }
      set {
        viaMqtt_ = value;
      }
    }

    /// <summary>Field number for the "hop_start" field.</summary>
    public const int HopStartFieldNumber = 15;
    private uint hopStart_;
    /// <summary>
    ///
    /// Hop limit with which the original packet started. Sent via LoRa using three bits in the unencrypted header.
    /// When receiving a packet, the difference between hop_start and hop_limit gives how many hops it traveled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HopStart {
      get { return hopStart_; }
      set {
        hopStart_ = value;
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 16;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///
    /// Records the public key the packet was encrypted with, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pki_encrypted" field.</summary>
    public const int PkiEncryptedFieldNumber = 17;
    private bool pkiEncrypted_;
    /// <summary>
    ///
    /// Indicates whether the packet was en/decrypted using PKI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PkiEncrypted {
      get { return pkiEncrypted_; }
      set {
        pkiEncrypted_ = value;
      }
    }

    /// <summary>Field number for the "next_hop" field.</summary>
    public const int NextHopFieldNumber = 18;
    private uint nextHop_;
    /// <summary>
    ///
    /// Last byte of the node number of the node that should be used as the next hop in routing. 
    /// Set by the firmware internally, clients are not supposed to set this.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NextHop {
      get { return nextHop_; }
      set {
        nextHop_ = value;
      }
    }

    /// <summary>Field number for the "relay_node" field.</summary>
    public const int RelayNodeFieldNumber = 19;
    private uint relayNode_;
    /// <summary>
    ///
    /// Last byte of the node number of the node that will relay/relayed this packet.
    /// Set by the firmware internally, clients are not supposed to set this.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RelayNode {
      get { return relayNode_; }
      set {
        relayNode_ = value;
      }
    }

    private object payloadVariant_;
    /// <summary>Enum of possible cases for the "payload_variant" oneof.</summary>
    public enum PayloadVariantOneofCase {
      None = 0,
      Decoded = 4,
      Encrypted = 5,
    }
    private PayloadVariantOneofCase payloadVariantCase_ = PayloadVariantOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PayloadVariantOneofCase PayloadVariantCase {
      get { return payloadVariantCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPayloadVariant() {
      payloadVariantCase_ = PayloadVariantOneofCase.None;
      payloadVariant_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MeshPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MeshPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Channel != other.Channel) return false;
      if (!object.Equals(Decoded, other.Decoded)) return false;
      if (Encrypted != other.Encrypted) return false;
      if (Id != other.Id) return false;
      if (RxTime != other.RxTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RxSnr, other.RxSnr)) return false;
      if (HopLimit != other.HopLimit) return false;
      if (WantAck != other.WantAck) return false;
      if (Priority != other.Priority) return false;
      if (RxRssi != other.RxRssi) return false;
      if (Delayed != other.Delayed) return false;
      if (ViaMqtt != other.ViaMqtt) return false;
      if (HopStart != other.HopStart) return false;
      if (PublicKey != other.PublicKey) return false;
      if (PkiEncrypted != other.PkiEncrypted) return false;
      if (NextHop != other.NextHop) return false;
      if (RelayNode != other.RelayNode) return false;
      if (PayloadVariantCase != other.PayloadVariantCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Decoded) hash ^= Decoded.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Encrypted) hash ^= Encrypted.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (RxTime != 0) hash ^= RxTime.GetHashCode();
      if (RxSnr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RxSnr);
      if (HopLimit != 0) hash ^= HopLimit.GetHashCode();
      if (WantAck != false) hash ^= WantAck.GetHashCode();
      if (Priority != global::Meshtastic.Protobufs.MeshPacket.Types.Priority.Unset) hash ^= Priority.GetHashCode();
      if (RxRssi != 0) hash ^= RxRssi.GetHashCode();
      if (Delayed != global::Meshtastic.Protobufs.MeshPacket.Types.Delayed.NoDelay) hash ^= Delayed.GetHashCode();
      if (ViaMqtt != false) hash ^= ViaMqtt.GetHashCode();
      if (HopStart != 0) hash ^= HopStart.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (PkiEncrypted != false) hash ^= PkiEncrypted.GetHashCode();
      if (NextHop != 0) hash ^= NextHop.GetHashCode();
      if (RelayNode != 0) hash ^= RelayNode.GetHashCode();
      hash ^= (int) payloadVariantCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(From);
      }
      if (To != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(To);
      }
      if (Channel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Channel);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Decoded) {
        output.WriteRawTag(34);
        output.WriteMessage(Decoded);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Encrypted) {
        output.WriteRawTag(42);
        output.WriteBytes(Encrypted);
      }
      if (Id != 0) {
        output.WriteRawTag(53);
        output.WriteFixed32(Id);
      }
      if (RxTime != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(RxTime);
      }
      if (RxSnr != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RxSnr);
      }
      if (HopLimit != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(HopLimit);
      }
      if (WantAck != false) {
        output.WriteRawTag(80);
        output.WriteBool(WantAck);
      }
      if (Priority != global::Meshtastic.Protobufs.MeshPacket.Types.Priority.Unset) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Priority);
      }
      if (RxRssi != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RxRssi);
      }
      if (Delayed != global::Meshtastic.Protobufs.MeshPacket.Types.Delayed.NoDelay) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Delayed);
      }
      if (ViaMqtt != false) {
        output.WriteRawTag(112);
        output.WriteBool(ViaMqtt);
      }
      if (HopStart != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(HopStart);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(PublicKey);
      }
      if (PkiEncrypted != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(PkiEncrypted);
      }
      if (NextHop != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(NextHop);
      }
      if (RelayNode != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(RelayNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(From);
      }
      if (To != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(To);
      }
      if (Channel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Channel);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Decoded) {
        output.WriteRawTag(34);
        output.WriteMessage(Decoded);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Encrypted) {
        output.WriteRawTag(42);
        output.WriteBytes(Encrypted);
      }
      if (Id != 0) {
        output.WriteRawTag(53);
        output.WriteFixed32(Id);
      }
      if (RxTime != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(RxTime);
      }
      if (RxSnr != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RxSnr);
      }
      if (HopLimit != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(HopLimit);
      }
      if (WantAck != false) {
        output.WriteRawTag(80);
        output.WriteBool(WantAck);
      }
      if (Priority != global::Meshtastic.Protobufs.MeshPacket.Types.Priority.Unset) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Priority);
      }
      if (RxRssi != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RxRssi);
      }
      if (Delayed != global::Meshtastic.Protobufs.MeshPacket.Types.Delayed.NoDelay) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Delayed);
      }
      if (ViaMqtt != false) {
        output.WriteRawTag(112);
        output.WriteBool(ViaMqtt);
      }
      if (HopStart != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(HopStart);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(PublicKey);
      }
      if (PkiEncrypted != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(PkiEncrypted);
      }
      if (NextHop != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(NextHop);
      }
      if (RelayNode != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(RelayNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + 4;
      }
      if (To != 0) {
        size += 1 + 4;
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Decoded) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Decoded);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Encrypted) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Encrypted);
      }
      if (Id != 0) {
        size += 1 + 4;
      }
      if (RxTime != 0) {
        size += 1 + 4;
      }
      if (RxSnr != 0F) {
        size += 1 + 4;
      }
      if (HopLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HopLimit);
      }
      if (WantAck != false) {
        size += 1 + 1;
      }
      if (Priority != global::Meshtastic.Protobufs.MeshPacket.Types.Priority.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Priority);
      }
      if (RxRssi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RxRssi);
      }
      if (Delayed != global::Meshtastic.Protobufs.MeshPacket.Types.Delayed.NoDelay) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Delayed);
      }
      if (ViaMqtt != false) {
        size += 1 + 1;
      }
      if (HopStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HopStart);
      }
      if (PublicKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (PkiEncrypted != false) {
        size += 2 + 1;
      }
      if (NextHop != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NextHop);
      }
      if (RelayNode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RelayNode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MeshPacket other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.RxTime != 0) {
        RxTime = other.RxTime;
      }
      if (other.RxSnr != 0F) {
        RxSnr = other.RxSnr;
      }
      if (other.HopLimit != 0) {
        HopLimit = other.HopLimit;
      }
      if (other.WantAck != false) {
        WantAck = other.WantAck;
      }
      if (other.Priority != global::Meshtastic.Protobufs.MeshPacket.Types.Priority.Unset) {
        Priority = other.Priority;
      }
      if (other.RxRssi != 0) {
        RxRssi = other.RxRssi;
      }
      if (other.Delayed != global::Meshtastic.Protobufs.MeshPacket.Types.Delayed.NoDelay) {
        Delayed = other.Delayed;
      }
      if (other.ViaMqtt != false) {
        ViaMqtt = other.ViaMqtt;
      }
      if (other.HopStart != 0) {
        HopStart = other.HopStart;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.PkiEncrypted != false) {
        PkiEncrypted = other.PkiEncrypted;
      }
      if (other.NextHop != 0) {
        NextHop = other.NextHop;
      }
      if (other.RelayNode != 0) {
        RelayNode = other.RelayNode;
      }
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.Decoded:
          if (Decoded == null) {
            Decoded = new global::Meshtastic.Protobufs.Data();
          }
          Decoded.MergeFrom(other.Decoded);
          break;
        case PayloadVariantOneofCase.Encrypted:
          Encrypted = other.Encrypted;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            From = input.ReadFixed32();
            break;
          }
          case 21: {
            To = input.ReadFixed32();
            break;
          }
          case 24: {
            Channel = input.ReadUInt32();
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.Data subBuilder = new global::Meshtastic.Protobufs.Data();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Decoded) {
              subBuilder.MergeFrom(Decoded);
            }
            input.ReadMessage(subBuilder);
            Decoded = subBuilder;
            break;
          }
          case 42: {
            Encrypted = input.ReadBytes();
            break;
          }
          case 53: {
            Id = input.ReadFixed32();
            break;
          }
          case 61: {
            RxTime = input.ReadFixed32();
            break;
          }
          case 69: {
            RxSnr = input.ReadFloat();
            break;
          }
          case 72: {
            HopLimit = input.ReadUInt32();
            break;
          }
          case 80: {
            WantAck = input.ReadBool();
            break;
          }
          case 88: {
            Priority = (global::Meshtastic.Protobufs.MeshPacket.Types.Priority) input.ReadEnum();
            break;
          }
          case 96: {
            RxRssi = input.ReadInt32();
            break;
          }
          case 104: {
            Delayed = (global::Meshtastic.Protobufs.MeshPacket.Types.Delayed) input.ReadEnum();
            break;
          }
          case 112: {
            ViaMqtt = input.ReadBool();
            break;
          }
          case 120: {
            HopStart = input.ReadUInt32();
            break;
          }
          case 130: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 136: {
            PkiEncrypted = input.ReadBool();
            break;
          }
          case 144: {
            NextHop = input.ReadUInt32();
            break;
          }
          case 152: {
            RelayNode = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            From = input.ReadFixed32();
            break;
          }
          case 21: {
            To = input.ReadFixed32();
            break;
          }
          case 24: {
            Channel = input.ReadUInt32();
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.Data subBuilder = new global::Meshtastic.Protobufs.Data();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Decoded) {
              subBuilder.MergeFrom(Decoded);
            }
            input.ReadMessage(subBuilder);
            Decoded = subBuilder;
            break;
          }
          case 42: {
            Encrypted = input.ReadBytes();
            break;
          }
          case 53: {
            Id = input.ReadFixed32();
            break;
          }
          case 61: {
            RxTime = input.ReadFixed32();
            break;
          }
          case 69: {
            RxSnr = input.ReadFloat();
            break;
          }
          case 72: {
            HopLimit = input.ReadUInt32();
            break;
          }
          case 80: {
            WantAck = input.ReadBool();
            break;
          }
          case 88: {
            Priority = (global::Meshtastic.Protobufs.MeshPacket.Types.Priority) input.ReadEnum();
            break;
          }
          case 96: {
            RxRssi = input.ReadInt32();
            break;
          }
          case 104: {
            Delayed = (global::Meshtastic.Protobufs.MeshPacket.Types.Delayed) input.ReadEnum();
            break;
          }
          case 112: {
            ViaMqtt = input.ReadBool();
            break;
          }
          case 120: {
            HopStart = input.ReadUInt32();
            break;
          }
          case 130: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 136: {
            PkiEncrypted = input.ReadBool();
            break;
          }
          case 144: {
            NextHop = input.ReadUInt32();
            break;
          }
          case 152: {
            RelayNode = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MeshPacket message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///
      /// The priority of this message for sending.
      /// Higher priorities are sent first (when managing the transmit queue).
      /// This field is never sent over the air, it is only used internally inside of a local device node.
      /// API clients (either on the local node or connected directly to the node)
      /// can set this parameter if necessary.
      /// (values must be &lt;= 127 to keep protobuf field to one byte in size.
      /// Detailed background on this field:
      /// I noticed a funny side effect of lora being so slow: Usually when making
      /// a protocol there isn’t much need to use message priority to change the order
      /// of transmission (because interfaces are fairly fast).
      /// But for lora where packets can take a few seconds each, it is very important
      /// to make sure that critical packets are sent ASAP.
      /// In the case of meshtastic that means we want to send protocol acks as soon as possible
      /// (to prevent unneeded retransmissions), we want routing messages to be sent next,
      /// then messages marked as reliable and finally 'background' packets like periodic position updates.
      /// So I bit the bullet and implemented a new (internal - not sent over the air)
      /// field in MeshPacket called 'priority'.
      /// And the transmission queue in the router object is now a priority queue.
      /// </summary>
      public enum Priority {
        /// <summary>
        ///
        /// Treated as Priority.DEFAULT
        /// </summary>
        [pbr::OriginalName("UNSET")] Unset = 0,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("MIN")] Min = 1,
        /// <summary>
        ///
        /// Background position updates are sent with very low priority -
        /// if the link is super congested they might not go out at all
        /// </summary>
        [pbr::OriginalName("BACKGROUND")] Background = 10,
        /// <summary>
        ///
        /// This priority is used for most messages that don't have a priority set
        /// </summary>
        [pbr::OriginalName("DEFAULT")] Default = 64,
        /// <summary>
        ///
        /// If priority is unset but the message is marked as want_ack,
        /// assume it is important and use a slightly higher priority
        /// </summary>
        [pbr::OriginalName("RELIABLE")] Reliable = 70,
        /// <summary>
        ///
        /// If priority is unset but the packet is a response to a request, we want it to get there relatively quickly.
        /// Furthermore, responses stop relaying packets directed to a node early.
        /// </summary>
        [pbr::OriginalName("RESPONSE")] Response = 80,
        /// <summary>
        ///
        /// Higher priority for specific message types (portnums) to distinguish between other reliable packets.
        /// </summary>
        [pbr::OriginalName("HIGH")] High = 100,
        /// <summary>
        ///
        /// Ack/naks are sent with very high priority to ensure that retransmission
        /// stops as soon as possible
        /// </summary>
        [pbr::OriginalName("ACK")] Ack = 120,
        /// <summary>
        ///
        /// TODO: REPLACE
        /// </summary>
        [pbr::OriginalName("MAX")] Max = 127,
      }

      /// <summary>
      ///
      /// Identify if this is a delayed packet
      /// </summary>
      public enum Delayed {
        /// <summary>
        ///
        /// If unset, the message is being sent in real time.
        /// </summary>
        [pbr::OriginalName("NO_DELAY")] NoDelay = 0,
        /// <summary>
        ///
        /// The message is delayed and was originally a broadcast
        /// </summary>
        [pbr::OriginalName("DELAYED_BROADCAST")] Broadcast = 1,
        /// <summary>
        ///
        /// The message is delayed and was originally a direct message
        /// </summary>
        [pbr::OriginalName("DELAYED_DIRECT")] Direct = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///
  /// The bluetooth to device link:
  /// Old BTLE protocol docs from TODO, merge in above and make real docs...
  /// use protocol buffers, and NanoPB
  /// messages from device to phone:
  /// POSITION_UPDATE (..., time)
  /// TEXT_RECEIVED(from, text, time)
  /// OPAQUE_RECEIVED(from, payload, time) (for signal messages or other applications)
  /// messages from phone to device:
  /// SET_MYID(id, human readable long, human readable short) (send down the unique ID
  /// string used for this node, a human readable string shown for that id, and a very
  /// short human readable string suitable for oled screen) SEND_OPAQUE(dest, payload)
  /// (for signal messages or other applications) SEND_TEXT(dest, text) Get all
  /// nodes() (returns list of nodes, with full info, last time seen, loc, battery
  /// level etc) SET_CONFIG (switches device to a new set of radio params and
  /// preshared key, drops all existing nodes, force our node to rejoin this new group)
  /// Full information about a node on the mesh
  /// </summary>
  public sealed partial class NodeInfo : pb::IMessage<NodeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeInfo(NodeInfo other) : this() {
      _hasBits0 = other._hasBits0;
      num_ = other.num_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      snr_ = other.snr_;
      lastHeard_ = other.lastHeard_;
      deviceMetrics_ = other.deviceMetrics_ != null ? other.deviceMetrics_.Clone() : null;
      channel_ = other.channel_;
      viaMqtt_ = other.viaMqtt_;
      hopsAway_ = other.hopsAway_;
      isFavorite_ = other.isFavorite_;
      isIgnored_ = other.isIgnored_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeInfo Clone() {
      return new NodeInfo(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private uint num_;
    /// <summary>
    ///
    /// The node number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>
    /// Return the node number as a hex string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NumAsHexString
    {
      get { return num_.ToString("X"); }
      set {   }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Meshtastic.Protobufs.User user_;
    /// <summary>
    ///
    /// The user info for this node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Meshtastic.Protobufs.Position position_;
    /// <summary>
    ///
    /// This position data. Note: before 1.2.14 we would also store the last time we've heard from this node in position.time, that is no longer true.
    /// Position.time now indicates the last time we received a POSITION from that node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "snr" field.</summary>
    public const int SnrFieldNumber = 4;
    private float snr_;
    /// <summary>
    ///
    /// Returns the Signal-to-noise ratio (SNR) of the last received message,
    /// as measured by the receiver. Return SNR of the last received message in dB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Snr {
      get { return snr_; }
      set {
        snr_ = value;
      }
    }

    /// <summary>Field number for the "last_heard" field.</summary>
    public const int LastHeardFieldNumber = 5;
    private uint lastHeard_;
    /// <summary>
    ///
    /// Set to indicate the last time we received a packet from this node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LastHeard {
      get { return lastHeard_; }
      set {
        lastHeard_ = value;
      }
    }

    /// <summary>Field number for the "device_metrics" field.</summary>
    public const int DeviceMetricsFieldNumber = 6;
    private global::Meshtastic.Protobufs.DeviceMetrics deviceMetrics_;
    /// <summary>
    ///
    /// The latest device metrics for the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.DeviceMetrics DeviceMetrics {
      get { return deviceMetrics_; }
      set {
        deviceMetrics_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 7;
    private uint channel_;
    /// <summary>
    ///
    /// local channel index we heard that node on. Only populated if its not the default channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "via_mqtt" field.</summary>
    public const int ViaMqttFieldNumber = 8;
    private bool viaMqtt_;
    /// <summary>
    ///
    /// True if we witnessed the node over MQTT instead of LoRA transport
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ViaMqtt {
      get { return viaMqtt_; }
      set {
        viaMqtt_ = value;
      }
    }

    /// <summary>Field number for the "hops_away" field.</summary>
    public const int HopsAwayFieldNumber = 9;
    private uint hopsAway_;
    /// <summary>
    ///
    /// Number of hops away from us this node is (0 if direct neighbor)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HopsAway {
      get { if ((_hasBits0 & 1) != 0) { return hopsAway_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        hopsAway_ = value;
      }
    }
    /// <summary>Gets whether the "hops_away" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHopsAway {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hops_away" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHopsAway() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_favorite" field.</summary>
    public const int IsFavoriteFieldNumber = 10;
    private bool isFavorite_;
    /// <summary>
    ///
    /// True if node is in our favorites list
    /// Persists between NodeDB internal clean ups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFavorite {
      get { return isFavorite_; }
      set {
        isFavorite_ = value;
      }
    }

    /// <summary>Field number for the "is_ignored" field.</summary>
    public const int IsIgnoredFieldNumber = 11;
    private bool isIgnored_;
    /// <summary>
    ///
    /// True if node is in our ignored list
    /// Persists between NodeDB internal clean ups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsIgnored {
      get { return isIgnored_; }
      set {
        isIgnored_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Snr, other.Snr)) return false;
      if (LastHeard != other.LastHeard) return false;
      if (!object.Equals(DeviceMetrics, other.DeviceMetrics)) return false;
      if (Channel != other.Channel) return false;
      if (ViaMqtt != other.ViaMqtt) return false;
      if (HopsAway != other.HopsAway) return false;
      if (IsFavorite != other.IsFavorite) return false;
      if (IsIgnored != other.IsIgnored) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Snr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Snr);
      if (LastHeard != 0) hash ^= LastHeard.GetHashCode();
      if (deviceMetrics_ != null) hash ^= DeviceMetrics.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (ViaMqtt != false) hash ^= ViaMqtt.GetHashCode();
      if (HasHopsAway) hash ^= HopsAway.GetHashCode();
      if (IsFavorite != false) hash ^= IsFavorite.GetHashCode();
      if (IsIgnored != false) hash ^= IsIgnored.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Num);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (Snr != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Snr);
      }
      if (LastHeard != 0) {
        output.WriteRawTag(45);
        output.WriteFixed32(LastHeard);
      }
      if (deviceMetrics_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeviceMetrics);
      }
      if (Channel != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Channel);
      }
      if (ViaMqtt != false) {
        output.WriteRawTag(64);
        output.WriteBool(ViaMqtt);
      }
      if (HasHopsAway) {
        output.WriteRawTag(72);
        output.WriteUInt32(HopsAway);
      }
      if (IsFavorite != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsFavorite);
      }
      if (IsIgnored != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsIgnored);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Num);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (Snr != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Snr);
      }
      if (LastHeard != 0) {
        output.WriteRawTag(45);
        output.WriteFixed32(LastHeard);
      }
      if (deviceMetrics_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeviceMetrics);
      }
      if (Channel != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Channel);
      }
      if (ViaMqtt != false) {
        output.WriteRawTag(64);
        output.WriteBool(ViaMqtt);
      }
      if (HasHopsAway) {
        output.WriteRawTag(72);
        output.WriteUInt32(HopsAway);
      }
      if (IsFavorite != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsFavorite);
      }
      if (IsIgnored != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsIgnored);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Snr != 0F) {
        size += 1 + 4;
      }
      if (LastHeard != 0) {
        size += 1 + 4;
      }
      if (deviceMetrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceMetrics);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
      }
      if (ViaMqtt != false) {
        size += 1 + 1;
      }
      if (HasHopsAway) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HopsAway);
      }
      if (IsFavorite != false) {
        size += 1 + 1;
      }
      if (IsIgnored != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Meshtastic.Protobufs.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Meshtastic.Protobufs.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Snr != 0F) {
        Snr = other.Snr;
      }
      if (other.LastHeard != 0) {
        LastHeard = other.LastHeard;
      }
      if (other.deviceMetrics_ != null) {
        if (deviceMetrics_ == null) {
          DeviceMetrics = new global::Meshtastic.Protobufs.DeviceMetrics();
        }
        DeviceMetrics.MergeFrom(other.DeviceMetrics);
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.ViaMqtt != false) {
        ViaMqtt = other.ViaMqtt;
      }
      if (other.HasHopsAway) {
        HopsAway = other.HopsAway;
      }
      if (other.IsFavorite != false) {
        IsFavorite = other.IsFavorite;
      }
      if (other.IsIgnored != false) {
        IsIgnored = other.IsIgnored;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadUInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::Meshtastic.Protobufs.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::Meshtastic.Protobufs.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 37: {
            Snr = input.ReadFloat();
            break;
          }
          case 45: {
            LastHeard = input.ReadFixed32();
            break;
          }
          case 50: {
            if (deviceMetrics_ == null) {
              DeviceMetrics = new global::Meshtastic.Protobufs.DeviceMetrics();
            }
            input.ReadMessage(DeviceMetrics);
            break;
          }
          case 56: {
            Channel = input.ReadUInt32();
            break;
          }
          case 64: {
            ViaMqtt = input.ReadBool();
            break;
          }
          case 72: {
            HopsAway = input.ReadUInt32();
            break;
          }
          case 80: {
            IsFavorite = input.ReadBool();
            break;
          }
          case 88: {
            IsIgnored = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Num = input.ReadUInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::Meshtastic.Protobufs.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::Meshtastic.Protobufs.Position();
            }
            input.ReadMessage(Position);
            break;
          }
          case 37: {
            Snr = input.ReadFloat();
            break;
          }
          case 45: {
            LastHeard = input.ReadFixed32();
            break;
          }
          case 50: {
            if (deviceMetrics_ == null) {
              DeviceMetrics = new global::Meshtastic.Protobufs.DeviceMetrics();
            }
            input.ReadMessage(DeviceMetrics);
            break;
          }
          case 56: {
            Channel = input.ReadUInt32();
            break;
          }
          case 64: {
            ViaMqtt = input.ReadBool();
            break;
          }
          case 72: {
            HopsAway = input.ReadUInt32();
            break;
          }
          case 80: {
            IsFavorite = input.ReadBool();
            break;
          }
          case 88: {
            IsIgnored = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Unique local debugging info for this node
  /// Note: we don't include position or the user info, because that will come in the
  /// Sent to the phone in response to WantNodes.
  /// </summary>
  public sealed partial class MyNodeInfo : pb::IMessage<MyNodeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MyNodeInfo> _parser = new pb::MessageParser<MyNodeInfo>(() => new MyNodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MyNodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MyNodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MyNodeInfo(MyNodeInfo other) : this() {
      myNodeNum_ = other.myNodeNum_;
      rebootCount_ = other.rebootCount_;
      minAppVersion_ = other.minAppVersion_;
      deviceId_ = other.deviceId_;
      pioEnv_ = other.pioEnv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MyNodeInfo Clone() {
      return new MyNodeInfo(this);
    }

    /// <summary>Field number for the "my_node_num" field.</summary>
    public const int MyNodeNumFieldNumber = 1;
    private uint myNodeNum_;
    /// <summary>
    ///
    /// Tells the phone what our node number is, default starting value is
    /// lowbyte of macaddr, but it will be fixed if that is already in use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MyNodeNum {
      get { return myNodeNum_; }
      set {
        myNodeNum_ = value;
      }
    }

    /// <summary>Field number for the "reboot_count" field.</summary>
    public const int RebootCountFieldNumber = 8;
    private uint rebootCount_;
    /// <summary>
    ///
    /// The total number of reboots this node has ever encountered
    /// (well - since the last time we discarded preferences)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RebootCount {
      get { return rebootCount_; }
      set {
        rebootCount_ = value;
      }
    }

    /// <summary>Field number for the "min_app_version" field.</summary>
    public const int MinAppVersionFieldNumber = 11;
    private uint minAppVersion_;
    /// <summary>
    ///
    /// The minimum app version that can talk to this device.
    /// Phone/PC apps should compare this to their build number and if too low tell the user they must update their app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MinAppVersion {
      get { return minAppVersion_; }
      set {
        minAppVersion_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 12;
    private pb::ByteString deviceId_ = pb::ByteString.Empty;
    /// <summary>
    ///
    /// Unique hardware identifier for this device
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pio_env" field.</summary>
    public const int PioEnvFieldNumber = 13;
    private string pioEnv_ = "";
    /// <summary>
    ///
    /// The PlatformIO environment used to build this firmware
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PioEnv {
      get { return pioEnv_; }
      set {
        pioEnv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MyNodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MyNodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MyNodeNum != other.MyNodeNum) return false;
      if (RebootCount != other.RebootCount) return false;
      if (MinAppVersion != other.MinAppVersion) return false;
      if (DeviceId != other.DeviceId) return false;
      if (PioEnv != other.PioEnv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MyNodeNum != 0) hash ^= MyNodeNum.GetHashCode();
      if (RebootCount != 0) hash ^= RebootCount.GetHashCode();
      if (MinAppVersion != 0) hash ^= MinAppVersion.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (PioEnv.Length != 0) hash ^= PioEnv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MyNodeNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MyNodeNum);
      }
      if (RebootCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(RebootCount);
      }
      if (MinAppVersion != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MinAppVersion);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(DeviceId);
      }
      if (PioEnv.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PioEnv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MyNodeNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MyNodeNum);
      }
      if (RebootCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(RebootCount);
      }
      if (MinAppVersion != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MinAppVersion);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(DeviceId);
      }
      if (PioEnv.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PioEnv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MyNodeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyNodeNum);
      }
      if (RebootCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RebootCount);
      }
      if (MinAppVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinAppVersion);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceId);
      }
      if (PioEnv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PioEnv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MyNodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.MyNodeNum != 0) {
        MyNodeNum = other.MyNodeNum;
      }
      if (other.RebootCount != 0) {
        RebootCount = other.RebootCount;
      }
      if (other.MinAppVersion != 0) {
        MinAppVersion = other.MinAppVersion;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.PioEnv.Length != 0) {
        PioEnv = other.PioEnv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MyNodeNum = input.ReadUInt32();
            break;
          }
          case 64: {
            RebootCount = input.ReadUInt32();
            break;
          }
          case 88: {
            MinAppVersion = input.ReadUInt32();
            break;
          }
          case 98: {
            DeviceId = input.ReadBytes();
            break;
          }
          case 106: {
            PioEnv = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MyNodeNum = input.ReadUInt32();
            break;
          }
          case 64: {
            RebootCount = input.ReadUInt32();
            break;
          }
          case 88: {
            MinAppVersion = input.ReadUInt32();
            break;
          }
          case 98: {
            DeviceId = input.ReadBytes();
            break;
          }
          case 106: {
            PioEnv = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Debug output from the device.
  /// To minimize the size of records inside the device code, if a time/source/level is not set
  /// on the message it is assumed to be a continuation of the previously sent message.
  /// This allows the device code to use fixed maxlen 64 byte strings for messages,
  /// and then extend as needed by emitting multiple records.
  /// </summary>
  public sealed partial class LogRecord : pb::IMessage<LogRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogRecord> _parser = new pb::MessageParser<LogRecord>(() => new LogRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LogRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogRecord(LogRecord other) : this() {
      message_ = other.message_;
      time_ = other.time_;
      source_ = other.source_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LogRecord Clone() {
      return new LogRecord(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    /// <summary>
    ///
    /// Log levels, chosen to match python logging conventions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    ///
    /// Seconds since 1970 - or 0 for unknown/unset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    /// <summary>
    ///
    /// Usually based on thread name - if known
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private global::Meshtastic.Protobufs.LogRecord.Types.Level level_ = global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset;
    /// <summary>
    ///
    /// Not yet set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.LogRecord.Types.Level Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LogRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LogRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (Time != other.Time) return false;
      if (Source != other.Source) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (Time != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(Time);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (Time != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(Time);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Time != 0) {
        size += 1 + 4;
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LogRecord other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 21: {
            Time = input.ReadFixed32();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 32: {
            Level = (global::Meshtastic.Protobufs.LogRecord.Types.Level) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 21: {
            Time = input.ReadFixed32();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 32: {
            Level = (global::Meshtastic.Protobufs.LogRecord.Types.Level) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LogRecord message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///
      /// Log levels, chosen to match python logging conventions.
      /// </summary>
      public enum Level {
        /// <summary>
        ///
        /// Log levels, chosen to match python logging conventions.
        /// </summary>
        [pbr::OriginalName("UNSET")] Unset = 0,
        /// <summary>
        ///
        /// Log levels, chosen to match python logging conventions.
        /// </summary>
        [pbr::OriginalName("CRITICAL")] Critical = 50,
        /// <summary>
        ///
        /// Log levels, chosen to match python logging conventions.
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 40,
        /// <summary>
        ///
        /// Log levels, chosen to match python logging conventions.
        /// </summary>
        [pbr::OriginalName("WARNING")] Warning = 30,
        /// <summary>
        ///
        /// Log levels, chosen to match python logging conventions.
        /// </summary>
        [pbr::OriginalName("INFO")] Info = 20,
        /// <summary>
        ///
        /// Log levels, chosen to match python logging conventions.
        /// </summary>
        [pbr::OriginalName("DEBUG")] Debug = 10,
        /// <summary>
        ///
        /// Log levels, chosen to match python logging conventions.
        /// </summary>
        [pbr::OriginalName("TRACE")] Trace = 5,
      }

    }
    #endregion

  }

  public sealed partial class QueueStatus : pb::IMessage<QueueStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueueStatus> _parser = new pb::MessageParser<QueueStatus>(() => new QueueStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<QueueStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueueStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueueStatus(QueueStatus other) : this() {
      res_ = other.res_;
      free_ = other.free_;
      maxlen_ = other.maxlen_;
      meshPacketId_ = other.meshPacketId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueueStatus Clone() {
      return new QueueStatus(this);
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 1;
    private int res_;
    /// <summary>
    /// Last attempt to queue status, ErrorCode 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    /// <summary>Field number for the "free" field.</summary>
    public const int FreeFieldNumber = 2;
    private uint free_;
    /// <summary>
    /// Free entries in the outgoing queue 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Free {
      get { return free_; }
      set {
        free_ = value;
      }
    }

    /// <summary>Field number for the "maxlen" field.</summary>
    public const int MaxlenFieldNumber = 3;
    private uint maxlen_;
    /// <summary>
    /// Maximum entries in the outgoing queue 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Maxlen {
      get { return maxlen_; }
      set {
        maxlen_ = value;
      }
    }

    /// <summary>Field number for the "mesh_packet_id" field.</summary>
    public const int MeshPacketIdFieldNumber = 4;
    private uint meshPacketId_;
    /// <summary>
    /// What was mesh packet id that generated this response? 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MeshPacketId {
      get { return meshPacketId_; }
      set {
        meshPacketId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as QueueStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(QueueStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Res != other.Res) return false;
      if (Free != other.Free) return false;
      if (Maxlen != other.Maxlen) return false;
      if (MeshPacketId != other.MeshPacketId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Res != 0) hash ^= Res.GetHashCode();
      if (Free != 0) hash ^= Free.GetHashCode();
      if (Maxlen != 0) hash ^= Maxlen.GetHashCode();
      if (MeshPacketId != 0) hash ^= MeshPacketId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Res != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Res);
      }
      if (Free != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Free);
      }
      if (Maxlen != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Maxlen);
      }
      if (MeshPacketId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MeshPacketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Res != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Res);
      }
      if (Free != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Free);
      }
      if (Maxlen != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Maxlen);
      }
      if (MeshPacketId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MeshPacketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Res != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res);
      }
      if (Free != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Free);
      }
      if (Maxlen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxlen);
      }
      if (MeshPacketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MeshPacketId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(QueueStatus other) {
      if (other == null) {
        return;
      }
      if (other.Res != 0) {
        Res = other.Res;
      }
      if (other.Free != 0) {
        Free = other.Free;
      }
      if (other.Maxlen != 0) {
        Maxlen = other.Maxlen;
      }
      if (other.MeshPacketId != 0) {
        MeshPacketId = other.MeshPacketId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Res = input.ReadInt32();
            break;
          }
          case 16: {
            Free = input.ReadUInt32();
            break;
          }
          case 24: {
            Maxlen = input.ReadUInt32();
            break;
          }
          case 32: {
            MeshPacketId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Res = input.ReadInt32();
            break;
          }
          case 16: {
            Free = input.ReadUInt32();
            break;
          }
          case 24: {
            Maxlen = input.ReadUInt32();
            break;
          }
          case 32: {
            MeshPacketId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Packets from the radio to the phone will appear on the fromRadio characteristic.
  /// It will support READ and NOTIFY. When a new packet arrives the device will BLE notify?
  /// It will sit in that descriptor until consumed by the phone,
  /// at which point the next item in the FIFO will be populated.
  /// </summary>
  public sealed partial class FromRadio : pb::IMessage<FromRadio>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromRadio> _parser = new pb::MessageParser<FromRadio>(() => new FromRadio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FromRadio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FromRadio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FromRadio(FromRadio other) : this() {
      id_ = other.id_;
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.Packet:
          Packet = other.Packet.Clone();
          break;
        case PayloadVariantOneofCase.MyInfo:
          MyInfo = other.MyInfo.Clone();
          break;
        case PayloadVariantOneofCase.NodeInfo:
          NodeInfo = other.NodeInfo.Clone();
          break;
        case PayloadVariantOneofCase.Config:
          Config = other.Config.Clone();
          break;
        case PayloadVariantOneofCase.LogRecord:
          LogRecord = other.LogRecord.Clone();
          break;
        case PayloadVariantOneofCase.ConfigCompleteId:
          ConfigCompleteId = other.ConfigCompleteId;
          break;
        case PayloadVariantOneofCase.Rebooted:
          Rebooted = other.Rebooted;
          break;
        case PayloadVariantOneofCase.ModuleConfig:
          ModuleConfig = other.ModuleConfig.Clone();
          break;
        case PayloadVariantOneofCase.Channel:
          Channel = other.Channel.Clone();
          break;
        case PayloadVariantOneofCase.QueueStatus:
          QueueStatus = other.QueueStatus.Clone();
          break;
        case PayloadVariantOneofCase.XmodemPacket:
          XmodemPacket = other.XmodemPacket.Clone();
          break;
        case PayloadVariantOneofCase.Metadata:
          Metadata = other.Metadata.Clone();
          break;
        case PayloadVariantOneofCase.MqttClientProxyMessage:
          MqttClientProxyMessage = other.MqttClientProxyMessage.Clone();
          break;
        case PayloadVariantOneofCase.FileInfo:
          FileInfo = other.FileInfo.Clone();
          break;
        case PayloadVariantOneofCase.ClientNotification:
          ClientNotification = other.ClientNotification.Clone();
          break;
        case PayloadVariantOneofCase.DeviceuiConfig:
          DeviceuiConfig = other.DeviceuiConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FromRadio Clone() {
      return new FromRadio(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///
    /// The packet id, used to allow the phone to request missing read packets from the FIFO,
    /// see our bluetooth docs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "packet" field.</summary>
    public const int PacketFieldNumber = 2;
    /// <summary>
    ///
    /// Log levels, chosen to match python logging conventions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.MeshPacket Packet {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Packet ? (global::Meshtastic.Protobufs.MeshPacket) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.Packet;
      }
    }

    /// <summary>Field number for the "my_info" field.</summary>
    public const int MyInfoFieldNumber = 3;
    /// <summary>
    ///
    /// Tells the phone what our node number is, can be -1 if we've not yet joined a mesh.
    /// NOTE: This ID must not change - to keep (minimal) compatibility with &lt;1.2 version of android apps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.MyNodeInfo MyInfo {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.MyInfo ? (global::Meshtastic.Protobufs.MyNodeInfo) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.MyInfo;
      }
    }

    /// <summary>Field number for the "node_info" field.</summary>
    public const int NodeInfoFieldNumber = 4;
    /// <summary>
    ///
    /// One packet is sent for each node in the on radio DB
    /// starts over with the first node in our DB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.NodeInfo NodeInfo {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.NodeInfo ? (global::Meshtastic.Protobufs.NodeInfo) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.NodeInfo;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 5;
    /// <summary>
    ///
    /// Include a part of the config (was: RadioConfig radio)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Config Config {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Config ? (global::Meshtastic.Protobufs.Config) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.Config;
      }
    }

    /// <summary>Field number for the "log_record" field.</summary>
    public const int LogRecordFieldNumber = 6;
    /// <summary>
    ///
    /// Set to send debug console output over our protobuf stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.LogRecord LogRecord {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.LogRecord ? (global::Meshtastic.Protobufs.LogRecord) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.LogRecord;
      }
    }

    /// <summary>Field number for the "config_complete_id" field.</summary>
    public const int ConfigCompleteIdFieldNumber = 7;
    /// <summary>
    ///
    /// Sent as true once the device has finished sending all of the responses to want_config
    /// recipient should check if this ID matches our original request nonce, if
    /// not, it means your config responses haven't started yet.
    /// NOTE: This ID must not change - to keep (minimal) compatibility with &lt;1.2 version of android apps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ConfigCompleteId {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.ConfigCompleteId ? (uint) payloadVariant_ : 0; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = PayloadVariantOneofCase.ConfigCompleteId;
      }
    }

    /// <summary>Field number for the "rebooted" field.</summary>
    public const int RebootedFieldNumber = 8;
    /// <summary>
    ///
    /// Sent to tell clients the radio has just rebooted.
    /// Set to true if present.
    /// Not used on all transports, currently just used for the serial console.
    /// NOTE: This ID must not change - to keep (minimal) compatibility with &lt;1.2 version of android apps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Rebooted {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Rebooted ? (bool) payloadVariant_ : false; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = PayloadVariantOneofCase.Rebooted;
      }
    }

    /// <summary>Field number for the "moduleConfig" field.</summary>
    public const int ModuleConfigFieldNumber = 9;
    /// <summary>
    ///
    /// Include module config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.ModuleConfig ModuleConfig {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.ModuleConfig ? (global::Meshtastic.Protobufs.ModuleConfig) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.ModuleConfig;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 10;
    /// <summary>
    ///
    /// One packet is sent for each channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Channel Channel {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Channel ? (global::Meshtastic.Protobufs.Channel) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.Channel;
      }
    }

    /// <summary>Field number for the "queueStatus" field.</summary>
    public const int QueueStatusFieldNumber = 11;
    /// <summary>
    ///
    /// Queue status info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.QueueStatus QueueStatus {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.QueueStatus ? (global::Meshtastic.Protobufs.QueueStatus) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.QueueStatus;
      }
    }

    /// <summary>Field number for the "xmodemPacket" field.</summary>
    public const int XmodemPacketFieldNumber = 12;
    /// <summary>
    ///
    /// File Transfer Chunk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.XModem XmodemPacket {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket ? (global::Meshtastic.Protobufs.XModem) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.XmodemPacket;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 13;
    /// <summary>
    ///
    /// Device metadata message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.DeviceMetadata Metadata {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Metadata ? (global::Meshtastic.Protobufs.DeviceMetadata) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.Metadata;
      }
    }

    /// <summary>Field number for the "mqttClientProxyMessage" field.</summary>
    public const int MqttClientProxyMessageFieldNumber = 14;
    /// <summary>
    ///
    /// MQTT Client Proxy Message (device sending to client / phone for publishing to MQTT)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.MqttClientProxyMessage MqttClientProxyMessage {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage ? (global::Meshtastic.Protobufs.MqttClientProxyMessage) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.MqttClientProxyMessage;
      }
    }

    /// <summary>Field number for the "fileInfo" field.</summary>
    public const int FileInfoFieldNumber = 15;
    /// <summary>
    ///
    /// File system manifest messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.FileInfo FileInfo {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.FileInfo ? (global::Meshtastic.Protobufs.FileInfo) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.FileInfo;
      }
    }

    /// <summary>Field number for the "clientNotification" field.</summary>
    public const int ClientNotificationFieldNumber = 16;
    /// <summary>
    ///
    /// Notification message to the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.ClientNotification ClientNotification {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.ClientNotification ? (global::Meshtastic.Protobufs.ClientNotification) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.ClientNotification;
      }
    }

    /// <summary>Field number for the "deviceuiConfig" field.</summary>
    public const int DeviceuiConfigFieldNumber = 17;
    /// <summary>
    ///
    /// Persistent data for device-ui
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.DeviceUIConfig DeviceuiConfig {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.DeviceuiConfig ? (global::Meshtastic.Protobufs.DeviceUIConfig) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.DeviceuiConfig;
      }
    }

    private object payloadVariant_;
    /// <summary>Enum of possible cases for the "payload_variant" oneof.</summary>
    public enum PayloadVariantOneofCase {
      None = 0,
      Packet = 2,
      MyInfo = 3,
      NodeInfo = 4,
      Config = 5,
      LogRecord = 6,
      ConfigCompleteId = 7,
      Rebooted = 8,
      ModuleConfig = 9,
      Channel = 10,
      QueueStatus = 11,
      XmodemPacket = 12,
      Metadata = 13,
      MqttClientProxyMessage = 14,
      FileInfo = 15,
      ClientNotification = 16,
      DeviceuiConfig = 17,
    }
    private PayloadVariantOneofCase payloadVariantCase_ = PayloadVariantOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PayloadVariantOneofCase PayloadVariantCase {
      get { return payloadVariantCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPayloadVariant() {
      payloadVariantCase_ = PayloadVariantOneofCase.None;
      payloadVariant_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FromRadio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FromRadio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Packet, other.Packet)) return false;
      if (!object.Equals(MyInfo, other.MyInfo)) return false;
      if (!object.Equals(NodeInfo, other.NodeInfo)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(LogRecord, other.LogRecord)) return false;
      if (ConfigCompleteId != other.ConfigCompleteId) return false;
      if (Rebooted != other.Rebooted) return false;
      if (!object.Equals(ModuleConfig, other.ModuleConfig)) return false;
      if (!object.Equals(Channel, other.Channel)) return false;
      if (!object.Equals(QueueStatus, other.QueueStatus)) return false;
      if (!object.Equals(XmodemPacket, other.XmodemPacket)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(MqttClientProxyMessage, other.MqttClientProxyMessage)) return false;
      if (!object.Equals(FileInfo, other.FileInfo)) return false;
      if (!object.Equals(ClientNotification, other.ClientNotification)) return false;
      if (!object.Equals(DeviceuiConfig, other.DeviceuiConfig)) return false;
      if (PayloadVariantCase != other.PayloadVariantCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) hash ^= Packet.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.MyInfo) hash ^= MyInfo.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.NodeInfo) hash ^= NodeInfo.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Config) hash ^= Config.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.LogRecord) hash ^= LogRecord.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.ConfigCompleteId) hash ^= ConfigCompleteId.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Rebooted) hash ^= Rebooted.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.ModuleConfig) hash ^= ModuleConfig.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Channel) hash ^= Channel.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.QueueStatus) hash ^= QueueStatus.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) hash ^= XmodemPacket.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Metadata) hash ^= Metadata.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) hash ^= MqttClientProxyMessage.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.FileInfo) hash ^= FileInfo.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.ClientNotification) hash ^= ClientNotification.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.DeviceuiConfig) hash ^= DeviceuiConfig.GetHashCode();
      hash ^= (int) payloadVariantCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
        output.WriteRawTag(18);
        output.WriteMessage(Packet);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MyInfo) {
        output.WriteRawTag(26);
        output.WriteMessage(MyInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.NodeInfo) {
        output.WriteRawTag(34);
        output.WriteMessage(NodeInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Config) {
        output.WriteRawTag(42);
        output.WriteMessage(Config);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.LogRecord) {
        output.WriteRawTag(50);
        output.WriteMessage(LogRecord);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ConfigCompleteId) {
        output.WriteRawTag(56);
        output.WriteUInt32(ConfigCompleteId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Rebooted) {
        output.WriteRawTag(64);
        output.WriteBool(Rebooted);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ModuleConfig) {
        output.WriteRawTag(74);
        output.WriteMessage(ModuleConfig);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Channel) {
        output.WriteRawTag(82);
        output.WriteMessage(Channel);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.QueueStatus) {
        output.WriteRawTag(90);
        output.WriteMessage(QueueStatus);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
        output.WriteRawTag(98);
        output.WriteMessage(XmodemPacket);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Metadata) {
        output.WriteRawTag(106);
        output.WriteMessage(Metadata);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
        output.WriteRawTag(114);
        output.WriteMessage(MqttClientProxyMessage);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.FileInfo) {
        output.WriteRawTag(122);
        output.WriteMessage(FileInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ClientNotification) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ClientNotification);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.DeviceuiConfig) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DeviceuiConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
        output.WriteRawTag(18);
        output.WriteMessage(Packet);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MyInfo) {
        output.WriteRawTag(26);
        output.WriteMessage(MyInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.NodeInfo) {
        output.WriteRawTag(34);
        output.WriteMessage(NodeInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Config) {
        output.WriteRawTag(42);
        output.WriteMessage(Config);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.LogRecord) {
        output.WriteRawTag(50);
        output.WriteMessage(LogRecord);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ConfigCompleteId) {
        output.WriteRawTag(56);
        output.WriteUInt32(ConfigCompleteId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Rebooted) {
        output.WriteRawTag(64);
        output.WriteBool(Rebooted);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ModuleConfig) {
        output.WriteRawTag(74);
        output.WriteMessage(ModuleConfig);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Channel) {
        output.WriteRawTag(82);
        output.WriteMessage(Channel);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.QueueStatus) {
        output.WriteRawTag(90);
        output.WriteMessage(QueueStatus);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
        output.WriteRawTag(98);
        output.WriteMessage(XmodemPacket);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Metadata) {
        output.WriteRawTag(106);
        output.WriteMessage(Metadata);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
        output.WriteRawTag(114);
        output.WriteMessage(MqttClientProxyMessage);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.FileInfo) {
        output.WriteRawTag(122);
        output.WriteMessage(FileInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ClientNotification) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ClientNotification);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.DeviceuiConfig) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DeviceuiConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Packet);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MyInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.NodeInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.LogRecord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogRecord);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ConfigCompleteId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigCompleteId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Rebooted) {
        size += 1 + 1;
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ModuleConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModuleConfig);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Channel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.QueueStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueueStatus);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XmodemPacket);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Metadata) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MqttClientProxyMessage);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.FileInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileInfo);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ClientNotification) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClientNotification);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.DeviceuiConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeviceuiConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FromRadio other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.Packet:
          if (Packet == null) {
            Packet = new global::Meshtastic.Protobufs.MeshPacket();
          }
          Packet.MergeFrom(other.Packet);
          break;
        case PayloadVariantOneofCase.MyInfo:
          if (MyInfo == null) {
            MyInfo = new global::Meshtastic.Protobufs.MyNodeInfo();
          }
          MyInfo.MergeFrom(other.MyInfo);
          break;
        case PayloadVariantOneofCase.NodeInfo:
          if (NodeInfo == null) {
            NodeInfo = new global::Meshtastic.Protobufs.NodeInfo();
          }
          NodeInfo.MergeFrom(other.NodeInfo);
          break;
        case PayloadVariantOneofCase.Config:
          if (Config == null) {
            Config = new global::Meshtastic.Protobufs.Config();
          }
          Config.MergeFrom(other.Config);
          break;
        case PayloadVariantOneofCase.LogRecord:
          if (LogRecord == null) {
            LogRecord = new global::Meshtastic.Protobufs.LogRecord();
          }
          LogRecord.MergeFrom(other.LogRecord);
          break;
        case PayloadVariantOneofCase.ConfigCompleteId:
          ConfigCompleteId = other.ConfigCompleteId;
          break;
        case PayloadVariantOneofCase.Rebooted:
          Rebooted = other.Rebooted;
          break;
        case PayloadVariantOneofCase.ModuleConfig:
          if (ModuleConfig == null) {
            ModuleConfig = new global::Meshtastic.Protobufs.ModuleConfig();
          }
          ModuleConfig.MergeFrom(other.ModuleConfig);
          break;
        case PayloadVariantOneofCase.Channel:
          if (Channel == null) {
            Channel = new global::Meshtastic.Protobufs.Channel();
          }
          Channel.MergeFrom(other.Channel);
          break;
        case PayloadVariantOneofCase.QueueStatus:
          if (QueueStatus == null) {
            QueueStatus = new global::Meshtastic.Protobufs.QueueStatus();
          }
          QueueStatus.MergeFrom(other.QueueStatus);
          break;
        case PayloadVariantOneofCase.XmodemPacket:
          if (XmodemPacket == null) {
            XmodemPacket = new global::Meshtastic.Protobufs.XModem();
          }
          XmodemPacket.MergeFrom(other.XmodemPacket);
          break;
        case PayloadVariantOneofCase.Metadata:
          if (Metadata == null) {
            Metadata = new global::Meshtastic.Protobufs.DeviceMetadata();
          }
          Metadata.MergeFrom(other.Metadata);
          break;
        case PayloadVariantOneofCase.MqttClientProxyMessage:
          if (MqttClientProxyMessage == null) {
            MqttClientProxyMessage = new global::Meshtastic.Protobufs.MqttClientProxyMessage();
          }
          MqttClientProxyMessage.MergeFrom(other.MqttClientProxyMessage);
          break;
        case PayloadVariantOneofCase.FileInfo:
          if (FileInfo == null) {
            FileInfo = new global::Meshtastic.Protobufs.FileInfo();
          }
          FileInfo.MergeFrom(other.FileInfo);
          break;
        case PayloadVariantOneofCase.ClientNotification:
          if (ClientNotification == null) {
            ClientNotification = new global::Meshtastic.Protobufs.ClientNotification();
          }
          ClientNotification.MergeFrom(other.ClientNotification);
          break;
        case PayloadVariantOneofCase.DeviceuiConfig:
          if (DeviceuiConfig == null) {
            DeviceuiConfig = new global::Meshtastic.Protobufs.DeviceUIConfig();
          }
          DeviceuiConfig.MergeFrom(other.DeviceuiConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Meshtastic.Protobufs.MeshPacket subBuilder = new global::Meshtastic.Protobufs.MeshPacket();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
              subBuilder.MergeFrom(Packet);
            }
            input.ReadMessage(subBuilder);
            Packet = subBuilder;
            break;
          }
          case 26: {
            global::Meshtastic.Protobufs.MyNodeInfo subBuilder = new global::Meshtastic.Protobufs.MyNodeInfo();
            if (payloadVariantCase_ == PayloadVariantOneofCase.MyInfo) {
              subBuilder.MergeFrom(MyInfo);
            }
            input.ReadMessage(subBuilder);
            MyInfo = subBuilder;
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.NodeInfo subBuilder = new global::Meshtastic.Protobufs.NodeInfo();
            if (payloadVariantCase_ == PayloadVariantOneofCase.NodeInfo) {
              subBuilder.MergeFrom(NodeInfo);
            }
            input.ReadMessage(subBuilder);
            NodeInfo = subBuilder;
            break;
          }
          case 42: {
            global::Meshtastic.Protobufs.Config subBuilder = new global::Meshtastic.Protobufs.Config();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 50: {
            global::Meshtastic.Protobufs.LogRecord subBuilder = new global::Meshtastic.Protobufs.LogRecord();
            if (payloadVariantCase_ == PayloadVariantOneofCase.LogRecord) {
              subBuilder.MergeFrom(LogRecord);
            }
            input.ReadMessage(subBuilder);
            LogRecord = subBuilder;
            break;
          }
          case 56: {
            ConfigCompleteId = input.ReadUInt32();
            break;
          }
          case 64: {
            Rebooted = input.ReadBool();
            break;
          }
          case 74: {
            global::Meshtastic.Protobufs.ModuleConfig subBuilder = new global::Meshtastic.Protobufs.ModuleConfig();
            if (payloadVariantCase_ == PayloadVariantOneofCase.ModuleConfig) {
              subBuilder.MergeFrom(ModuleConfig);
            }
            input.ReadMessage(subBuilder);
            ModuleConfig = subBuilder;
            break;
          }
          case 82: {
            global::Meshtastic.Protobufs.Channel subBuilder = new global::Meshtastic.Protobufs.Channel();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Channel) {
              subBuilder.MergeFrom(Channel);
            }
            input.ReadMessage(subBuilder);
            Channel = subBuilder;
            break;
          }
          case 90: {
            global::Meshtastic.Protobufs.QueueStatus subBuilder = new global::Meshtastic.Protobufs.QueueStatus();
            if (payloadVariantCase_ == PayloadVariantOneofCase.QueueStatus) {
              subBuilder.MergeFrom(QueueStatus);
            }
            input.ReadMessage(subBuilder);
            QueueStatus = subBuilder;
            break;
          }
          case 98: {
            global::Meshtastic.Protobufs.XModem subBuilder = new global::Meshtastic.Protobufs.XModem();
            if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
              subBuilder.MergeFrom(XmodemPacket);
            }
            input.ReadMessage(subBuilder);
            XmodemPacket = subBuilder;
            break;
          }
          case 106: {
            global::Meshtastic.Protobufs.DeviceMetadata subBuilder = new global::Meshtastic.Protobufs.DeviceMetadata();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Metadata) {
              subBuilder.MergeFrom(Metadata);
            }
            input.ReadMessage(subBuilder);
            Metadata = subBuilder;
            break;
          }
          case 114: {
            global::Meshtastic.Protobufs.MqttClientProxyMessage subBuilder = new global::Meshtastic.Protobufs.MqttClientProxyMessage();
            if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
              subBuilder.MergeFrom(MqttClientProxyMessage);
            }
            input.ReadMessage(subBuilder);
            MqttClientProxyMessage = subBuilder;
            break;
          }
          case 122: {
            global::Meshtastic.Protobufs.FileInfo subBuilder = new global::Meshtastic.Protobufs.FileInfo();
            if (payloadVariantCase_ == PayloadVariantOneofCase.FileInfo) {
              subBuilder.MergeFrom(FileInfo);
            }
            input.ReadMessage(subBuilder);
            FileInfo = subBuilder;
            break;
          }
          case 130: {
            global::Meshtastic.Protobufs.ClientNotification subBuilder = new global::Meshtastic.Protobufs.ClientNotification();
            if (payloadVariantCase_ == PayloadVariantOneofCase.ClientNotification) {
              subBuilder.MergeFrom(ClientNotification);
            }
            input.ReadMessage(subBuilder);
            ClientNotification = subBuilder;
            break;
          }
          case 138: {
            global::Meshtastic.Protobufs.DeviceUIConfig subBuilder = new global::Meshtastic.Protobufs.DeviceUIConfig();
            if (payloadVariantCase_ == PayloadVariantOneofCase.DeviceuiConfig) {
              subBuilder.MergeFrom(DeviceuiConfig);
            }
            input.ReadMessage(subBuilder);
            DeviceuiConfig = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Meshtastic.Protobufs.MeshPacket subBuilder = new global::Meshtastic.Protobufs.MeshPacket();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
              subBuilder.MergeFrom(Packet);
            }
            input.ReadMessage(subBuilder);
            Packet = subBuilder;
            break;
          }
          case 26: {
            global::Meshtastic.Protobufs.MyNodeInfo subBuilder = new global::Meshtastic.Protobufs.MyNodeInfo();
            if (payloadVariantCase_ == PayloadVariantOneofCase.MyInfo) {
              subBuilder.MergeFrom(MyInfo);
            }
            input.ReadMessage(subBuilder);
            MyInfo = subBuilder;
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.NodeInfo subBuilder = new global::Meshtastic.Protobufs.NodeInfo();
            if (payloadVariantCase_ == PayloadVariantOneofCase.NodeInfo) {
              subBuilder.MergeFrom(NodeInfo);
            }
            input.ReadMessage(subBuilder);
            NodeInfo = subBuilder;
            break;
          }
          case 42: {
            global::Meshtastic.Protobufs.Config subBuilder = new global::Meshtastic.Protobufs.Config();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 50: {
            global::Meshtastic.Protobufs.LogRecord subBuilder = new global::Meshtastic.Protobufs.LogRecord();
            if (payloadVariantCase_ == PayloadVariantOneofCase.LogRecord) {
              subBuilder.MergeFrom(LogRecord);
            }
            input.ReadMessage(subBuilder);
            LogRecord = subBuilder;
            break;
          }
          case 56: {
            ConfigCompleteId = input.ReadUInt32();
            break;
          }
          case 64: {
            Rebooted = input.ReadBool();
            break;
          }
          case 74: {
            global::Meshtastic.Protobufs.ModuleConfig subBuilder = new global::Meshtastic.Protobufs.ModuleConfig();
            if (payloadVariantCase_ == PayloadVariantOneofCase.ModuleConfig) {
              subBuilder.MergeFrom(ModuleConfig);
            }
            input.ReadMessage(subBuilder);
            ModuleConfig = subBuilder;
            break;
          }
          case 82: {
            global::Meshtastic.Protobufs.Channel subBuilder = new global::Meshtastic.Protobufs.Channel();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Channel) {
              subBuilder.MergeFrom(Channel);
            }
            input.ReadMessage(subBuilder);
            Channel = subBuilder;
            break;
          }
          case 90: {
            global::Meshtastic.Protobufs.QueueStatus subBuilder = new global::Meshtastic.Protobufs.QueueStatus();
            if (payloadVariantCase_ == PayloadVariantOneofCase.QueueStatus) {
              subBuilder.MergeFrom(QueueStatus);
            }
            input.ReadMessage(subBuilder);
            QueueStatus = subBuilder;
            break;
          }
          case 98: {
            global::Meshtastic.Protobufs.XModem subBuilder = new global::Meshtastic.Protobufs.XModem();
            if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
              subBuilder.MergeFrom(XmodemPacket);
            }
            input.ReadMessage(subBuilder);
            XmodemPacket = subBuilder;
            break;
          }
          case 106: {
            global::Meshtastic.Protobufs.DeviceMetadata subBuilder = new global::Meshtastic.Protobufs.DeviceMetadata();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Metadata) {
              subBuilder.MergeFrom(Metadata);
            }
            input.ReadMessage(subBuilder);
            Metadata = subBuilder;
            break;
          }
          case 114: {
            global::Meshtastic.Protobufs.MqttClientProxyMessage subBuilder = new global::Meshtastic.Protobufs.MqttClientProxyMessage();
            if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
              subBuilder.MergeFrom(MqttClientProxyMessage);
            }
            input.ReadMessage(subBuilder);
            MqttClientProxyMessage = subBuilder;
            break;
          }
          case 122: {
            global::Meshtastic.Protobufs.FileInfo subBuilder = new global::Meshtastic.Protobufs.FileInfo();
            if (payloadVariantCase_ == PayloadVariantOneofCase.FileInfo) {
              subBuilder.MergeFrom(FileInfo);
            }
            input.ReadMessage(subBuilder);
            FileInfo = subBuilder;
            break;
          }
          case 130: {
            global::Meshtastic.Protobufs.ClientNotification subBuilder = new global::Meshtastic.Protobufs.ClientNotification();
            if (payloadVariantCase_ == PayloadVariantOneofCase.ClientNotification) {
              subBuilder.MergeFrom(ClientNotification);
            }
            input.ReadMessage(subBuilder);
            ClientNotification = subBuilder;
            break;
          }
          case 138: {
            global::Meshtastic.Protobufs.DeviceUIConfig subBuilder = new global::Meshtastic.Protobufs.DeviceUIConfig();
            if (payloadVariantCase_ == PayloadVariantOneofCase.DeviceuiConfig) {
              subBuilder.MergeFrom(DeviceuiConfig);
            }
            input.ReadMessage(subBuilder);
            DeviceuiConfig = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// A notification message from the device to the client
  /// To be used for important messages that should to be displayed to the user
  /// in the form of push notifications or validation messages when saving
  /// invalid configuration.
  /// </summary>
  public sealed partial class ClientNotification : pb::IMessage<ClientNotification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientNotification> _parser = new pb::MessageParser<ClientNotification>(() => new ClientNotification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClientNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientNotification(ClientNotification other) : this() {
      _hasBits0 = other._hasBits0;
      replyId_ = other.replyId_;
      time_ = other.time_;
      level_ = other.level_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientNotification Clone() {
      return new ClientNotification(this);
    }

    /// <summary>Field number for the "reply_id" field.</summary>
    public const int ReplyIdFieldNumber = 1;
    private uint replyId_;
    /// <summary>
    ///
    /// The id of the packet we're notifying in response to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ReplyId {
      get { if ((_hasBits0 & 1) != 0) { return replyId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        replyId_ = value;
      }
    }
    /// <summary>Gets whether the "reply_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReplyId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reply_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReplyId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    ///
    /// Seconds since 1970 - or 0 for unknown/unset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private global::Meshtastic.Protobufs.LogRecord.Types.Level level_ = global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset;
    /// <summary>
    ///
    /// The level type of notification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.LogRecord.Types.Level Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    /// <summary>
    ///
    /// The message body of the notification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClientNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClientNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReplyId != other.ReplyId) return false;
      if (Time != other.Time) return false;
      if (Level != other.Level) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReplyId) hash ^= ReplyId.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) hash ^= Level.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReplyId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReplyId);
      }
      if (Time != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(Time);
      }
      if (Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Level);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReplyId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReplyId);
      }
      if (Time != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(Time);
      }
      if (Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Level);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasReplyId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReplyId);
      }
      if (Time != 0) {
        size += 1 + 4;
      }
      if (Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClientNotification other) {
      if (other == null) {
        return;
      }
      if (other.HasReplyId) {
        ReplyId = other.ReplyId;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Level != global::Meshtastic.Protobufs.LogRecord.Types.Level.Unset) {
        Level = other.Level;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReplyId = input.ReadUInt32();
            break;
          }
          case 21: {
            Time = input.ReadFixed32();
            break;
          }
          case 24: {
            Level = (global::Meshtastic.Protobufs.LogRecord.Types.Level) input.ReadEnum();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReplyId = input.ReadUInt32();
            break;
          }
          case 21: {
            Time = input.ReadFixed32();
            break;
          }
          case 24: {
            Level = (global::Meshtastic.Protobufs.LogRecord.Types.Level) input.ReadEnum();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Individual File info for the device
  /// </summary>
  public sealed partial class FileInfo : pb::IMessage<FileInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FileInfo> _parser = new pb::MessageParser<FileInfo>(() => new FileInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FileInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FileInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FileInfo(FileInfo other) : this() {
      fileName_ = other.fileName_;
      sizeBytes_ = other.sizeBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FileInfo Clone() {
      return new FileInfo(this);
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    /// <summary>
    ///
    /// The fully qualified path of the file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size_bytes" field.</summary>
    public const int SizeBytesFieldNumber = 2;
    private uint sizeBytes_;
    /// <summary>
    ///
    /// The size of the file in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SizeBytes {
      get { return sizeBytes_; }
      set {
        sizeBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FileInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FileInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (SizeBytes != other.SizeBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (SizeBytes != 0) hash ^= SizeBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (SizeBytes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SizeBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (SizeBytes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SizeBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (SizeBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SizeBytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FileInfo other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.SizeBytes != 0) {
        SizeBytes = other.SizeBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            SizeBytes = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            SizeBytes = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Packets/commands to the radio will be written (reliably) to the toRadio characteristic.
  /// Once the write completes the phone can assume it is handled.
  /// </summary>
  public sealed partial class ToRadio : pb::IMessage<ToRadio>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ToRadio> _parser = new pb::MessageParser<ToRadio>(() => new ToRadio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ToRadio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToRadio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToRadio(ToRadio other) : this() {
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.Packet:
          Packet = other.Packet.Clone();
          break;
        case PayloadVariantOneofCase.WantConfigId:
          WantConfigId = other.WantConfigId;
          break;
        case PayloadVariantOneofCase.Disconnect:
          Disconnect = other.Disconnect;
          break;
        case PayloadVariantOneofCase.XmodemPacket:
          XmodemPacket = other.XmodemPacket.Clone();
          break;
        case PayloadVariantOneofCase.MqttClientProxyMessage:
          MqttClientProxyMessage = other.MqttClientProxyMessage.Clone();
          break;
        case PayloadVariantOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToRadio Clone() {
      return new ToRadio(this);
    }

    /// <summary>Field number for the "packet" field.</summary>
    public const int PacketFieldNumber = 1;
    /// <summary>
    ///
    /// Send this packet on the mesh
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.MeshPacket Packet {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Packet ? (global::Meshtastic.Protobufs.MeshPacket) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.Packet;
      }
    }

    /// <summary>Field number for the "want_config_id" field.</summary>
    public const int WantConfigIdFieldNumber = 3;
    /// <summary>
    ///
    /// Phone wants radio to send full node db to the phone, This is
    /// typically the first packet sent to the radio when the phone gets a
    /// bluetooth connection. The radio will respond by sending back a
    /// MyNodeInfo, a owner, a radio config and a series of
    /// FromRadio.node_infos, and config_complete
    /// the integer you write into this field will be reported back in the
    /// config_complete_id response this allows clients to never be confused by
    /// a stale old partially sent config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WantConfigId {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.WantConfigId ? (uint) payloadVariant_ : 0; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = PayloadVariantOneofCase.WantConfigId;
      }
    }

    /// <summary>Field number for the "disconnect" field.</summary>
    public const int DisconnectFieldNumber = 4;
    /// <summary>
    ///
    /// Tell API server we are disconnecting now.
    /// This is useful for serial links where there is no hardware/protocol based notification that the client has dropped the link.
    /// (Sending this message is optional for clients)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Disconnect {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Disconnect ? (bool) payloadVariant_ : false; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = PayloadVariantOneofCase.Disconnect;
      }
    }

    /// <summary>Field number for the "xmodemPacket" field.</summary>
    public const int XmodemPacketFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.XModem XmodemPacket {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket ? (global::Meshtastic.Protobufs.XModem) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.XmodemPacket;
      }
    }

    /// <summary>Field number for the "mqttClientProxyMessage" field.</summary>
    public const int MqttClientProxyMessageFieldNumber = 6;
    /// <summary>
    ///
    /// MQTT Client Proxy Message (for client / phone subscribed to MQTT sending to device)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.MqttClientProxyMessage MqttClientProxyMessage {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage ? (global::Meshtastic.Protobufs.MqttClientProxyMessage) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.MqttClientProxyMessage;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 7;
    /// <summary>
    ///
    /// Heartbeat message (used to keep the device connection awake on serial)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Heartbeat Heartbeat {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.Heartbeat ? (global::Meshtastic.Protobufs.Heartbeat) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.Heartbeat;
      }
    }

    private object payloadVariant_;
    /// <summary>Enum of possible cases for the "payload_variant" oneof.</summary>
    public enum PayloadVariantOneofCase {
      None = 0,
      Packet = 1,
      WantConfigId = 3,
      Disconnect = 4,
      XmodemPacket = 5,
      MqttClientProxyMessage = 6,
      Heartbeat = 7,
    }
    private PayloadVariantOneofCase payloadVariantCase_ = PayloadVariantOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PayloadVariantOneofCase PayloadVariantCase {
      get { return payloadVariantCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPayloadVariant() {
      payloadVariantCase_ = PayloadVariantOneofCase.None;
      payloadVariant_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ToRadio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ToRadio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Packet, other.Packet)) return false;
      if (WantConfigId != other.WantConfigId) return false;
      if (Disconnect != other.Disconnect) return false;
      if (!object.Equals(XmodemPacket, other.XmodemPacket)) return false;
      if (!object.Equals(MqttClientProxyMessage, other.MqttClientProxyMessage)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (PayloadVariantCase != other.PayloadVariantCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) hash ^= Packet.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.WantConfigId) hash ^= WantConfigId.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Disconnect) hash ^= Disconnect.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) hash ^= XmodemPacket.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) hash ^= MqttClientProxyMessage.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      hash ^= (int) payloadVariantCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
        output.WriteRawTag(10);
        output.WriteMessage(Packet);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.WantConfigId) {
        output.WriteRawTag(24);
        output.WriteUInt32(WantConfigId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Disconnect) {
        output.WriteRawTag(32);
        output.WriteBool(Disconnect);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
        output.WriteRawTag(42);
        output.WriteMessage(XmodemPacket);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
        output.WriteRawTag(50);
        output.WriteMessage(MqttClientProxyMessage);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Heartbeat) {
        output.WriteRawTag(58);
        output.WriteMessage(Heartbeat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
        output.WriteRawTag(10);
        output.WriteMessage(Packet);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.WantConfigId) {
        output.WriteRawTag(24);
        output.WriteUInt32(WantConfigId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Disconnect) {
        output.WriteRawTag(32);
        output.WriteBool(Disconnect);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
        output.WriteRawTag(42);
        output.WriteMessage(XmodemPacket);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
        output.WriteRawTag(50);
        output.WriteMessage(MqttClientProxyMessage);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Heartbeat) {
        output.WriteRawTag(58);
        output.WriteMessage(Heartbeat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Packet);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.WantConfigId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WantConfigId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Disconnect) {
        size += 1 + 1;
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XmodemPacket);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MqttClientProxyMessage);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ToRadio other) {
      if (other == null) {
        return;
      }
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.Packet:
          if (Packet == null) {
            Packet = new global::Meshtastic.Protobufs.MeshPacket();
          }
          Packet.MergeFrom(other.Packet);
          break;
        case PayloadVariantOneofCase.WantConfigId:
          WantConfigId = other.WantConfigId;
          break;
        case PayloadVariantOneofCase.Disconnect:
          Disconnect = other.Disconnect;
          break;
        case PayloadVariantOneofCase.XmodemPacket:
          if (XmodemPacket == null) {
            XmodemPacket = new global::Meshtastic.Protobufs.XModem();
          }
          XmodemPacket.MergeFrom(other.XmodemPacket);
          break;
        case PayloadVariantOneofCase.MqttClientProxyMessage:
          if (MqttClientProxyMessage == null) {
            MqttClientProxyMessage = new global::Meshtastic.Protobufs.MqttClientProxyMessage();
          }
          MqttClientProxyMessage.MergeFrom(other.MqttClientProxyMessage);
          break;
        case PayloadVariantOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Meshtastic.Protobufs.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Meshtastic.Protobufs.MeshPacket subBuilder = new global::Meshtastic.Protobufs.MeshPacket();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
              subBuilder.MergeFrom(Packet);
            }
            input.ReadMessage(subBuilder);
            Packet = subBuilder;
            break;
          }
          case 24: {
            WantConfigId = input.ReadUInt32();
            break;
          }
          case 32: {
            Disconnect = input.ReadBool();
            break;
          }
          case 42: {
            global::Meshtastic.Protobufs.XModem subBuilder = new global::Meshtastic.Protobufs.XModem();
            if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
              subBuilder.MergeFrom(XmodemPacket);
            }
            input.ReadMessage(subBuilder);
            XmodemPacket = subBuilder;
            break;
          }
          case 50: {
            global::Meshtastic.Protobufs.MqttClientProxyMessage subBuilder = new global::Meshtastic.Protobufs.MqttClientProxyMessage();
            if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
              subBuilder.MergeFrom(MqttClientProxyMessage);
            }
            input.ReadMessage(subBuilder);
            MqttClientProxyMessage = subBuilder;
            break;
          }
          case 58: {
            global::Meshtastic.Protobufs.Heartbeat subBuilder = new global::Meshtastic.Protobufs.Heartbeat();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Meshtastic.Protobufs.MeshPacket subBuilder = new global::Meshtastic.Protobufs.MeshPacket();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Packet) {
              subBuilder.MergeFrom(Packet);
            }
            input.ReadMessage(subBuilder);
            Packet = subBuilder;
            break;
          }
          case 24: {
            WantConfigId = input.ReadUInt32();
            break;
          }
          case 32: {
            Disconnect = input.ReadBool();
            break;
          }
          case 42: {
            global::Meshtastic.Protobufs.XModem subBuilder = new global::Meshtastic.Protobufs.XModem();
            if (payloadVariantCase_ == PayloadVariantOneofCase.XmodemPacket) {
              subBuilder.MergeFrom(XmodemPacket);
            }
            input.ReadMessage(subBuilder);
            XmodemPacket = subBuilder;
            break;
          }
          case 50: {
            global::Meshtastic.Protobufs.MqttClientProxyMessage subBuilder = new global::Meshtastic.Protobufs.MqttClientProxyMessage();
            if (payloadVariantCase_ == PayloadVariantOneofCase.MqttClientProxyMessage) {
              subBuilder.MergeFrom(MqttClientProxyMessage);
            }
            input.ReadMessage(subBuilder);
            MqttClientProxyMessage = subBuilder;
            break;
          }
          case 58: {
            global::Meshtastic.Protobufs.Heartbeat subBuilder = new global::Meshtastic.Protobufs.Heartbeat();
            if (payloadVariantCase_ == PayloadVariantOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Compressed message payload
  /// </summary>
  public sealed partial class Compressed : pb::IMessage<Compressed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Compressed> _parser = new pb::MessageParser<Compressed>(() => new Compressed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Compressed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Compressed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Compressed(Compressed other) : this() {
      portnum_ = other.portnum_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Compressed Clone() {
      return new Compressed(this);
    }

    /// <summary>Field number for the "portnum" field.</summary>
    public const int PortnumFieldNumber = 1;
    private global::Meshtastic.Protobufs.PortNum portnum_ = global::Meshtastic.Protobufs.PortNum.UnknownApp;
    /// <summary>
    ///
    /// PortNum to determine the how to handle the compressed payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.PortNum Portnum {
      get { return portnum_; }
      set {
        portnum_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    ///
    /// Compressed data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Compressed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Compressed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Portnum != other.Portnum) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) hash ^= Portnum.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Portnum);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Portnum);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Portnum);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Compressed other) {
      if (other == null) {
        return;
      }
      if (other.Portnum != global::Meshtastic.Protobufs.PortNum.UnknownApp) {
        Portnum = other.Portnum;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Portnum = (global::Meshtastic.Protobufs.PortNum) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Portnum = (global::Meshtastic.Protobufs.PortNum) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Full info on edges for a single node
  /// </summary>
  public sealed partial class NeighborInfo : pb::IMessage<NeighborInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NeighborInfo> _parser = new pb::MessageParser<NeighborInfo>(() => new NeighborInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NeighborInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NeighborInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NeighborInfo(NeighborInfo other) : this() {
      nodeId_ = other.nodeId_;
      lastSentById_ = other.lastSentById_;
      nodeBroadcastIntervalSecs_ = other.nodeBroadcastIntervalSecs_;
      neighbors_ = other.neighbors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NeighborInfo Clone() {
      return new NeighborInfo(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private uint nodeId_;
    /// <summary>
    ///
    /// The node ID of the node sending info on its neighbors
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "last_sent_by_id" field.</summary>
    public const int LastSentByIdFieldNumber = 2;
    private uint lastSentById_;
    /// <summary>
    ///
    /// Field to pass neighbor info for the next sending cycle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LastSentById {
      get { return lastSentById_; }
      set {
        lastSentById_ = value;
      }
    }

    /// <summary>Field number for the "node_broadcast_interval_secs" field.</summary>
    public const int NodeBroadcastIntervalSecsFieldNumber = 3;
    private uint nodeBroadcastIntervalSecs_;
    /// <summary>
    ///
    /// Broadcast interval of the represented node (in seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NodeBroadcastIntervalSecs {
      get { return nodeBroadcastIntervalSecs_; }
      set {
        nodeBroadcastIntervalSecs_ = value;
      }
    }

    /// <summary>Field number for the "neighbors" field.</summary>
    public const int NeighborsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Meshtastic.Protobufs.Neighbor> _repeated_neighbors_codec
        = pb::FieldCodec.ForMessage(34, global::Meshtastic.Protobufs.Neighbor.Parser);
    private readonly pbc::RepeatedField<global::Meshtastic.Protobufs.Neighbor> neighbors_ = new pbc::RepeatedField<global::Meshtastic.Protobufs.Neighbor>();
    /// <summary>
    ///
    /// The list of out edges from this node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Meshtastic.Protobufs.Neighbor> Neighbors {
      get { return neighbors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NeighborInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NeighborInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (LastSentById != other.LastSentById) return false;
      if (NodeBroadcastIntervalSecs != other.NodeBroadcastIntervalSecs) return false;
      if(!neighbors_.Equals(other.neighbors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0) hash ^= NodeId.GetHashCode();
      if (LastSentById != 0) hash ^= LastSentById.GetHashCode();
      if (NodeBroadcastIntervalSecs != 0) hash ^= NodeBroadcastIntervalSecs.GetHashCode();
      hash ^= neighbors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (LastSentById != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastSentById);
      }
      if (NodeBroadcastIntervalSecs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NodeBroadcastIntervalSecs);
      }
      neighbors_.WriteTo(output, _repeated_neighbors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (LastSentById != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastSentById);
      }
      if (NodeBroadcastIntervalSecs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NodeBroadcastIntervalSecs);
      }
      neighbors_.WriteTo(ref output, _repeated_neighbors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (LastSentById != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastSentById);
      }
      if (NodeBroadcastIntervalSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeBroadcastIntervalSecs);
      }
      size += neighbors_.CalculateSize(_repeated_neighbors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NeighborInfo other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0) {
        NodeId = other.NodeId;
      }
      if (other.LastSentById != 0) {
        LastSentById = other.LastSentById;
      }
      if (other.NodeBroadcastIntervalSecs != 0) {
        NodeBroadcastIntervalSecs = other.NodeBroadcastIntervalSecs;
      }
      neighbors_.Add(other.neighbors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            LastSentById = input.ReadUInt32();
            break;
          }
          case 24: {
            NodeBroadcastIntervalSecs = input.ReadUInt32();
            break;
          }
          case 34: {
            neighbors_.AddEntriesFrom(input, _repeated_neighbors_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            LastSentById = input.ReadUInt32();
            break;
          }
          case 24: {
            NodeBroadcastIntervalSecs = input.ReadUInt32();
            break;
          }
          case 34: {
            neighbors_.AddEntriesFrom(ref input, _repeated_neighbors_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// A single edge in the mesh
  /// </summary>
  public sealed partial class Neighbor : pb::IMessage<Neighbor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Neighbor> _parser = new pb::MessageParser<Neighbor>(() => new Neighbor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Neighbor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Neighbor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Neighbor(Neighbor other) : this() {
      nodeId_ = other.nodeId_;
      snr_ = other.snr_;
      lastRxTime_ = other.lastRxTime_;
      nodeBroadcastIntervalSecs_ = other.nodeBroadcastIntervalSecs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Neighbor Clone() {
      return new Neighbor(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private uint nodeId_;
    /// <summary>
    ///
    /// Node ID of neighbor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "snr" field.</summary>
    public const int SnrFieldNumber = 2;
    private float snr_;
    /// <summary>
    ///
    /// SNR of last heard message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Snr {
      get { return snr_; }
      set {
        snr_ = value;
      }
    }

    /// <summary>Field number for the "last_rx_time" field.</summary>
    public const int LastRxTimeFieldNumber = 3;
    private uint lastRxTime_;
    /// <summary>
    ///
    /// Reception time (in secs since 1970) of last message that was last sent by this ID.
    /// Note: this is for local storage only and will not be sent out over the mesh.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LastRxTime {
      get { return lastRxTime_; }
      set {
        lastRxTime_ = value;
      }
    }

    /// <summary>Field number for the "node_broadcast_interval_secs" field.</summary>
    public const int NodeBroadcastIntervalSecsFieldNumber = 4;
    private uint nodeBroadcastIntervalSecs_;
    /// <summary>
    ///
    /// Broadcast interval of this neighbor (in seconds).
    /// Note: this is for local storage only and will not be sent out over the mesh.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NodeBroadcastIntervalSecs {
      get { return nodeBroadcastIntervalSecs_; }
      set {
        nodeBroadcastIntervalSecs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Neighbor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Neighbor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Snr, other.Snr)) return false;
      if (LastRxTime != other.LastRxTime) return false;
      if (NodeBroadcastIntervalSecs != other.NodeBroadcastIntervalSecs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0) hash ^= NodeId.GetHashCode();
      if (Snr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Snr);
      if (LastRxTime != 0) hash ^= LastRxTime.GetHashCode();
      if (NodeBroadcastIntervalSecs != 0) hash ^= NodeBroadcastIntervalSecs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (Snr != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Snr);
      }
      if (LastRxTime != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(LastRxTime);
      }
      if (NodeBroadcastIntervalSecs != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NodeBroadcastIntervalSecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (Snr != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Snr);
      }
      if (LastRxTime != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(LastRxTime);
      }
      if (NodeBroadcastIntervalSecs != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NodeBroadcastIntervalSecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (Snr != 0F) {
        size += 1 + 4;
      }
      if (LastRxTime != 0) {
        size += 1 + 4;
      }
      if (NodeBroadcastIntervalSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeBroadcastIntervalSecs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Neighbor other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0) {
        NodeId = other.NodeId;
      }
      if (other.Snr != 0F) {
        Snr = other.Snr;
      }
      if (other.LastRxTime != 0) {
        LastRxTime = other.LastRxTime;
      }
      if (other.NodeBroadcastIntervalSecs != 0) {
        NodeBroadcastIntervalSecs = other.NodeBroadcastIntervalSecs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 21: {
            Snr = input.ReadFloat();
            break;
          }
          case 29: {
            LastRxTime = input.ReadFixed32();
            break;
          }
          case 32: {
            NodeBroadcastIntervalSecs = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 21: {
            Snr = input.ReadFloat();
            break;
          }
          case 29: {
            LastRxTime = input.ReadFixed32();
            break;
          }
          case 32: {
            NodeBroadcastIntervalSecs = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Device metadata response
  /// </summary>
  public sealed partial class DeviceMetadata : pb::IMessage<DeviceMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeviceMetadata> _parser = new pb::MessageParser<DeviceMetadata>(() => new DeviceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeviceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetadata(DeviceMetadata other) : this() {
      firmwareVersion_ = other.firmwareVersion_;
      deviceStateVersion_ = other.deviceStateVersion_;
      canShutdown_ = other.canShutdown_;
      hasWifi_ = other.hasWifi_;
      hasBluetooth_ = other.hasBluetooth_;
      hasEthernet_ = other.hasEthernet_;
      role_ = other.role_;
      positionFlags_ = other.positionFlags_;
      hwModel_ = other.hwModel_;
      hasRemoteHardware_ = other.hasRemoteHardware_;
      hasPKC_ = other.hasPKC_;
      excludedModules_ = other.excludedModules_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetadata Clone() {
      return new DeviceMetadata(this);
    }

    /// <summary>Field number for the "firmware_version" field.</summary>
    public const int FirmwareVersionFieldNumber = 1;
    private string firmwareVersion_ = "";
    /// <summary>
    ///
    /// Device firmware version string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FirmwareVersion {
      get { return firmwareVersion_; }
      set {
        firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_state_version" field.</summary>
    public const int DeviceStateVersionFieldNumber = 2;
    private uint deviceStateVersion_;
    /// <summary>
    ///
    /// Device state version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DeviceStateVersion {
      get { return deviceStateVersion_; }
      set {
        deviceStateVersion_ = value;
      }
    }

    /// <summary>Field number for the "canShutdown" field.</summary>
    public const int CanShutdownFieldNumber = 3;
    private bool canShutdown_;
    /// <summary>
    ///
    /// Indicates whether the device can shutdown CPU natively or via power management chip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanShutdown {
      get { return canShutdown_; }
      set {
        canShutdown_ = value;
      }
    }

    /// <summary>Field number for the "hasWifi" field.</summary>
    public const int HasWifiFieldNumber = 4;
    private bool hasWifi_;
    /// <summary>
    ///
    /// Indicates that the device has native wifi capability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWifi {
      get { return hasWifi_; }
      set {
        hasWifi_ = value;
      }
    }

    /// <summary>Field number for the "hasBluetooth" field.</summary>
    public const int HasBluetoothFieldNumber = 5;
    private bool hasBluetooth_;
    /// <summary>
    ///
    /// Indicates that the device has native bluetooth capability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBluetooth {
      get { return hasBluetooth_; }
      set {
        hasBluetooth_ = value;
      }
    }

    /// <summary>Field number for the "hasEthernet" field.</summary>
    public const int HasEthernetFieldNumber = 6;
    private bool hasEthernet_;
    /// <summary>
    ///
    /// Indicates that the device has an ethernet peripheral
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEthernet {
      get { return hasEthernet_; }
      set {
        hasEthernet_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 7;
    private global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role role_ = global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client;
    /// <summary>
    ///
    /// Indicates that the device's role in the mesh
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "position_flags" field.</summary>
    public const int PositionFlagsFieldNumber = 8;
    private uint positionFlags_;
    /// <summary>
    ///
    /// Indicates the device's current enabled position flags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PositionFlags {
      get { return positionFlags_; }
      set {
        positionFlags_ = value;
      }
    }

    /// <summary>Field number for the "hw_model" field.</summary>
    public const int HwModelFieldNumber = 9;
    private global::Meshtastic.Protobufs.HardwareModel hwModel_ = global::Meshtastic.Protobufs.HardwareModel.Unset;
    /// <summary>
    ///
    /// Device hardware model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.HardwareModel HwModel {
      get { return hwModel_; }
      set {
        hwModel_ = value;
      }
    }

    /// <summary>Field number for the "hasRemoteHardware" field.</summary>
    public const int HasRemoteHardwareFieldNumber = 10;
    private bool hasRemoteHardware_;
    /// <summary>
    ///
    /// Has Remote Hardware enabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRemoteHardware {
      get { return hasRemoteHardware_; }
      set {
        hasRemoteHardware_ = value;
      }
    }

    /// <summary>Field number for the "hasPKC" field.</summary>
    public const int HasPKCFieldNumber = 11;
    private bool hasPKC_;
    /// <summary>
    ///
    /// Has PKC capabilities
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPKC {
      get { return hasPKC_; }
      set {
        hasPKC_ = value;
      }
    }

    /// <summary>Field number for the "excluded_modules" field.</summary>
    public const int ExcludedModulesFieldNumber = 12;
    private uint excludedModules_;
    /// <summary>
    ///
    /// Bit field of boolean for excluded modules
    /// (bitwise OR of ExcludedModules)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ExcludedModules {
      get { return excludedModules_; }
      set {
        excludedModules_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeviceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeviceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirmwareVersion != other.FirmwareVersion) return false;
      if (DeviceStateVersion != other.DeviceStateVersion) return false;
      if (CanShutdown != other.CanShutdown) return false;
      if (HasWifi != other.HasWifi) return false;
      if (HasBluetooth != other.HasBluetooth) return false;
      if (HasEthernet != other.HasEthernet) return false;
      if (Role != other.Role) return false;
      if (PositionFlags != other.PositionFlags) return false;
      if (HwModel != other.HwModel) return false;
      if (HasRemoteHardware != other.HasRemoteHardware) return false;
      if (HasPKC != other.HasPKC) return false;
      if (ExcludedModules != other.ExcludedModules) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FirmwareVersion.Length != 0) hash ^= FirmwareVersion.GetHashCode();
      if (DeviceStateVersion != 0) hash ^= DeviceStateVersion.GetHashCode();
      if (CanShutdown != false) hash ^= CanShutdown.GetHashCode();
      if (HasWifi != false) hash ^= HasWifi.GetHashCode();
      if (HasBluetooth != false) hash ^= HasBluetooth.GetHashCode();
      if (HasEthernet != false) hash ^= HasEthernet.GetHashCode();
      if (Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) hash ^= Role.GetHashCode();
      if (PositionFlags != 0) hash ^= PositionFlags.GetHashCode();
      if (HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) hash ^= HwModel.GetHashCode();
      if (HasRemoteHardware != false) hash ^= HasRemoteHardware.GetHashCode();
      if (HasPKC != false) hash ^= HasPKC.GetHashCode();
      if (ExcludedModules != 0) hash ^= ExcludedModules.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirmwareVersion);
      }
      if (DeviceStateVersion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DeviceStateVersion);
      }
      if (CanShutdown != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanShutdown);
      }
      if (HasWifi != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasWifi);
      }
      if (HasBluetooth != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasBluetooth);
      }
      if (HasEthernet != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasEthernet);
      }
      if (Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Role);
      }
      if (PositionFlags != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PositionFlags);
      }
      if (HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) {
        output.WriteRawTag(72);
        output.WriteEnum((int) HwModel);
      }
      if (HasRemoteHardware != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasRemoteHardware);
      }
      if (HasPKC != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasPKC);
      }
      if (ExcludedModules != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ExcludedModules);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirmwareVersion);
      }
      if (DeviceStateVersion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DeviceStateVersion);
      }
      if (CanShutdown != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanShutdown);
      }
      if (HasWifi != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasWifi);
      }
      if (HasBluetooth != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasBluetooth);
      }
      if (HasEthernet != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasEthernet);
      }
      if (Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Role);
      }
      if (PositionFlags != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PositionFlags);
      }
      if (HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) {
        output.WriteRawTag(72);
        output.WriteEnum((int) HwModel);
      }
      if (HasRemoteHardware != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasRemoteHardware);
      }
      if (HasPKC != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasPKC);
      }
      if (ExcludedModules != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ExcludedModules);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FirmwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
      }
      if (DeviceStateVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceStateVersion);
      }
      if (CanShutdown != false) {
        size += 1 + 1;
      }
      if (HasWifi != false) {
        size += 1 + 1;
      }
      if (HasBluetooth != false) {
        size += 1 + 1;
      }
      if (HasEthernet != false) {
        size += 1 + 1;
      }
      if (Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (PositionFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionFlags);
      }
      if (HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HwModel);
      }
      if (HasRemoteHardware != false) {
        size += 1 + 1;
      }
      if (HasPKC != false) {
        size += 1 + 1;
      }
      if (ExcludedModules != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExcludedModules);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeviceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.FirmwareVersion.Length != 0) {
        FirmwareVersion = other.FirmwareVersion;
      }
      if (other.DeviceStateVersion != 0) {
        DeviceStateVersion = other.DeviceStateVersion;
      }
      if (other.CanShutdown != false) {
        CanShutdown = other.CanShutdown;
      }
      if (other.HasWifi != false) {
        HasWifi = other.HasWifi;
      }
      if (other.HasBluetooth != false) {
        HasBluetooth = other.HasBluetooth;
      }
      if (other.HasEthernet != false) {
        HasEthernet = other.HasEthernet;
      }
      if (other.Role != global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role.Client) {
        Role = other.Role;
      }
      if (other.PositionFlags != 0) {
        PositionFlags = other.PositionFlags;
      }
      if (other.HwModel != global::Meshtastic.Protobufs.HardwareModel.Unset) {
        HwModel = other.HwModel;
      }
      if (other.HasRemoteHardware != false) {
        HasRemoteHardware = other.HasRemoteHardware;
      }
      if (other.HasPKC != false) {
        HasPKC = other.HasPKC;
      }
      if (other.ExcludedModules != 0) {
        ExcludedModules = other.ExcludedModules;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 16: {
            DeviceStateVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            CanShutdown = input.ReadBool();
            break;
          }
          case 32: {
            HasWifi = input.ReadBool();
            break;
          }
          case 40: {
            HasBluetooth = input.ReadBool();
            break;
          }
          case 48: {
            HasEthernet = input.ReadBool();
            break;
          }
          case 56: {
            Role = (global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role) input.ReadEnum();
            break;
          }
          case 64: {
            PositionFlags = input.ReadUInt32();
            break;
          }
          case 72: {
            HwModel = (global::Meshtastic.Protobufs.HardwareModel) input.ReadEnum();
            break;
          }
          case 80: {
            HasRemoteHardware = input.ReadBool();
            break;
          }
          case 88: {
            HasPKC = input.ReadBool();
            break;
          }
          case 96: {
            ExcludedModules = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 16: {
            DeviceStateVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            CanShutdown = input.ReadBool();
            break;
          }
          case 32: {
            HasWifi = input.ReadBool();
            break;
          }
          case 40: {
            HasBluetooth = input.ReadBool();
            break;
          }
          case 48: {
            HasEthernet = input.ReadBool();
            break;
          }
          case 56: {
            Role = (global::Meshtastic.Protobufs.Config.Types.DeviceConfig.Types.Role) input.ReadEnum();
            break;
          }
          case 64: {
            PositionFlags = input.ReadUInt32();
            break;
          }
          case 72: {
            HwModel = (global::Meshtastic.Protobufs.HardwareModel) input.ReadEnum();
            break;
          }
          case 80: {
            HasRemoteHardware = input.ReadBool();
            break;
          }
          case 88: {
            HasPKC = input.ReadBool();
            break;
          }
          case 96: {
            ExcludedModules = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// A heartbeat message is sent to the node from the client to keep the connection alive.
  /// This is currently only needed to keep serial connections alive, but can be used by any PhoneAPI.
  /// </summary>
  public sealed partial class Heartbeat : pb::IMessage<Heartbeat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Heartbeat(Heartbeat other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// RemoteHardwarePins associated with a node
  /// </summary>
  public sealed partial class NodeRemoteHardwarePin : pb::IMessage<NodeRemoteHardwarePin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeRemoteHardwarePin> _parser = new pb::MessageParser<NodeRemoteHardwarePin>(() => new NodeRemoteHardwarePin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NodeRemoteHardwarePin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeRemoteHardwarePin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeRemoteHardwarePin(NodeRemoteHardwarePin other) : this() {
      nodeNum_ = other.nodeNum_;
      pin_ = other.pin_ != null ? other.pin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NodeRemoteHardwarePin Clone() {
      return new NodeRemoteHardwarePin(this);
    }

    /// <summary>Field number for the "node_num" field.</summary>
    public const int NodeNumFieldNumber = 1;
    private uint nodeNum_;
    /// <summary>
    ///
    /// The node_num exposing the available gpio pin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NodeNum {
      get { return nodeNum_; }
      set {
        nodeNum_ = value;
      }
    }

    /// <summary>Field number for the "pin" field.</summary>
    public const int PinFieldNumber = 2;
    private global::Meshtastic.Protobufs.RemoteHardwarePin pin_;
    /// <summary>
    ///
    /// The the available gpio pin for usage with RemoteHardware module
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.RemoteHardwarePin Pin {
      get { return pin_; }
      set {
        pin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NodeRemoteHardwarePin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NodeRemoteHardwarePin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeNum != other.NodeNum) return false;
      if (!object.Equals(Pin, other.Pin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeNum != 0) hash ^= NodeNum.GetHashCode();
      if (pin_ != null) hash ^= Pin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodeNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeNum);
      }
      if (pin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodeNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeNum);
      }
      if (pin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NodeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeNum);
      }
      if (pin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NodeRemoteHardwarePin other) {
      if (other == null) {
        return;
      }
      if (other.NodeNum != 0) {
        NodeNum = other.NodeNum;
      }
      if (other.pin_ != null) {
        if (pin_ == null) {
          Pin = new global::Meshtastic.Protobufs.RemoteHardwarePin();
        }
        Pin.MergeFrom(other.Pin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeNum = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pin_ == null) {
              Pin = new global::Meshtastic.Protobufs.RemoteHardwarePin();
            }
            input.ReadMessage(Pin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NodeNum = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pin_ == null) {
              Pin = new global::Meshtastic.Protobufs.RemoteHardwarePin();
            }
            input.ReadMessage(Pin);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChunkedPayload : pb::IMessage<ChunkedPayload>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChunkedPayload> _parser = new pb::MessageParser<ChunkedPayload>(() => new ChunkedPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ChunkedPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChunkedPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChunkedPayload(ChunkedPayload other) : this() {
      payloadId_ = other.payloadId_;
      chunkCount_ = other.chunkCount_;
      chunkIndex_ = other.chunkIndex_;
      payloadChunk_ = other.payloadChunk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChunkedPayload Clone() {
      return new ChunkedPayload(this);
    }

    /// <summary>Field number for the "payload_id" field.</summary>
    public const int PayloadIdFieldNumber = 1;
    private uint payloadId_;
    /// <summary>
    ///
    /// The ID of the entire payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PayloadId {
      get { return payloadId_; }
      set {
        payloadId_ = value;
      }
    }

    /// <summary>Field number for the "chunk_count" field.</summary>
    public const int ChunkCountFieldNumber = 2;
    private uint chunkCount_;
    /// <summary>
    ///
    /// The total number of chunks in the payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ChunkCount {
      get { return chunkCount_; }
      set {
        chunkCount_ = value;
      }
    }

    /// <summary>Field number for the "chunk_index" field.</summary>
    public const int ChunkIndexFieldNumber = 3;
    private uint chunkIndex_;
    /// <summary>
    ///
    /// The current chunk index in the total
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ChunkIndex {
      get { return chunkIndex_; }
      set {
        chunkIndex_ = value;
      }
    }

    /// <summary>Field number for the "payload_chunk" field.</summary>
    public const int PayloadChunkFieldNumber = 4;
    private pb::ByteString payloadChunk_ = pb::ByteString.Empty;
    /// <summary>
    ///
    /// The binary data of the current chunk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString PayloadChunk {
      get { return payloadChunk_; }
      set {
        payloadChunk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ChunkedPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ChunkedPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PayloadId != other.PayloadId) return false;
      if (ChunkCount != other.ChunkCount) return false;
      if (ChunkIndex != other.ChunkIndex) return false;
      if (PayloadChunk != other.PayloadChunk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PayloadId != 0) hash ^= PayloadId.GetHashCode();
      if (ChunkCount != 0) hash ^= ChunkCount.GetHashCode();
      if (ChunkIndex != 0) hash ^= ChunkIndex.GetHashCode();
      if (PayloadChunk.Length != 0) hash ^= PayloadChunk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PayloadId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PayloadId);
      }
      if (ChunkCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChunkCount);
      }
      if (ChunkIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChunkIndex);
      }
      if (PayloadChunk.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PayloadChunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PayloadId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PayloadId);
      }
      if (ChunkCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChunkCount);
      }
      if (ChunkIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChunkIndex);
      }
      if (PayloadChunk.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PayloadChunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PayloadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PayloadId);
      }
      if (ChunkCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkCount);
      }
      if (ChunkIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkIndex);
      }
      if (PayloadChunk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PayloadChunk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ChunkedPayload other) {
      if (other == null) {
        return;
      }
      if (other.PayloadId != 0) {
        PayloadId = other.PayloadId;
      }
      if (other.ChunkCount != 0) {
        ChunkCount = other.ChunkCount;
      }
      if (other.ChunkIndex != 0) {
        ChunkIndex = other.ChunkIndex;
      }
      if (other.PayloadChunk.Length != 0) {
        PayloadChunk = other.PayloadChunk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PayloadId = input.ReadUInt32();
            break;
          }
          case 16: {
            ChunkCount = input.ReadUInt32();
            break;
          }
          case 24: {
            ChunkIndex = input.ReadUInt32();
            break;
          }
          case 34: {
            PayloadChunk = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PayloadId = input.ReadUInt32();
            break;
          }
          case 16: {
            ChunkCount = input.ReadUInt32();
            break;
          }
          case 24: {
            ChunkIndex = input.ReadUInt32();
            break;
          }
          case 34: {
            PayloadChunk = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Wrapper message for broken repeated oneof support
  /// </summary>
  public sealed partial class resend_chunks : pb::IMessage<resend_chunks>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<resend_chunks> _parser = new pb::MessageParser<resend_chunks>(() => new resend_chunks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<resend_chunks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public resend_chunks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public resend_chunks(resend_chunks other) : this() {
      chunks_ = other.chunks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public resend_chunks Clone() {
      return new resend_chunks(this);
    }

    /// <summary>Field number for the "chunks" field.</summary>
    public const int ChunksFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_chunks_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> chunks_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> Chunks {
      get { return chunks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as resend_chunks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(resend_chunks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chunks_.Equals(other.chunks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chunks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      chunks_.WriteTo(output, _repeated_chunks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      chunks_.WriteTo(ref output, _repeated_chunks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += chunks_.CalculateSize(_repeated_chunks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(resend_chunks other) {
      if (other == null) {
        return;
      }
      chunks_.Add(other.chunks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            chunks_.AddEntriesFrom(input, _repeated_chunks_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            chunks_.AddEntriesFrom(ref input, _repeated_chunks_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Responses to a ChunkedPayload request
  /// </summary>
  public sealed partial class ChunkedPayloadResponse : pb::IMessage<ChunkedPayloadResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChunkedPayloadResponse> _parser = new pb::MessageParser<ChunkedPayloadResponse>(() => new ChunkedPayloadResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ChunkedPayloadResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.MeshReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChunkedPayloadResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChunkedPayloadResponse(ChunkedPayloadResponse other) : this() {
      payloadId_ = other.payloadId_;
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.RequestTransfer:
          RequestTransfer = other.RequestTransfer;
          break;
        case PayloadVariantOneofCase.AcceptTransfer:
          AcceptTransfer = other.AcceptTransfer;
          break;
        case PayloadVariantOneofCase.ResendChunks:
          ResendChunks = other.ResendChunks.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChunkedPayloadResponse Clone() {
      return new ChunkedPayloadResponse(this);
    }

    /// <summary>Field number for the "payload_id" field.</summary>
    public const int PayloadIdFieldNumber = 1;
    private uint payloadId_;
    /// <summary>
    ///
    /// The ID of the entire payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PayloadId {
      get { return payloadId_; }
      set {
        payloadId_ = value;
      }
    }

    /// <summary>Field number for the "request_transfer" field.</summary>
    public const int RequestTransferFieldNumber = 2;
    /// <summary>
    ///
    /// Request to transfer chunked payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RequestTransfer {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.RequestTransfer ? (bool) payloadVariant_ : false; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = PayloadVariantOneofCase.RequestTransfer;
      }
    }

    /// <summary>Field number for the "accept_transfer" field.</summary>
    public const int AcceptTransferFieldNumber = 3;
    /// <summary>
    ///
    /// Accept the transfer chunked payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AcceptTransfer {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.AcceptTransfer ? (bool) payloadVariant_ : false; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = PayloadVariantOneofCase.AcceptTransfer;
      }
    }

    /// <summary>Field number for the "resend_chunks" field.</summary>
    public const int ResendChunksFieldNumber = 4;
    /// <summary>
    ///
    /// Request missing indexes in the chunked payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.resend_chunks ResendChunks {
      get { return payloadVariantCase_ == PayloadVariantOneofCase.ResendChunks ? (global::Meshtastic.Protobufs.resend_chunks) payloadVariant_ : null; }
      set {
        payloadVariant_ = value;
        payloadVariantCase_ = value == null ? PayloadVariantOneofCase.None : PayloadVariantOneofCase.ResendChunks;
      }
    }

    private object payloadVariant_;
    /// <summary>Enum of possible cases for the "payload_variant" oneof.</summary>
    public enum PayloadVariantOneofCase {
      None = 0,
      RequestTransfer = 2,
      AcceptTransfer = 3,
      ResendChunks = 4,
    }
    private PayloadVariantOneofCase payloadVariantCase_ = PayloadVariantOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PayloadVariantOneofCase PayloadVariantCase {
      get { return payloadVariantCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPayloadVariant() {
      payloadVariantCase_ = PayloadVariantOneofCase.None;
      payloadVariant_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ChunkedPayloadResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ChunkedPayloadResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PayloadId != other.PayloadId) return false;
      if (RequestTransfer != other.RequestTransfer) return false;
      if (AcceptTransfer != other.AcceptTransfer) return false;
      if (!object.Equals(ResendChunks, other.ResendChunks)) return false;
      if (PayloadVariantCase != other.PayloadVariantCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PayloadId != 0) hash ^= PayloadId.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.RequestTransfer) hash ^= RequestTransfer.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.AcceptTransfer) hash ^= AcceptTransfer.GetHashCode();
      if (payloadVariantCase_ == PayloadVariantOneofCase.ResendChunks) hash ^= ResendChunks.GetHashCode();
      hash ^= (int) payloadVariantCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PayloadId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PayloadId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.RequestTransfer) {
        output.WriteRawTag(16);
        output.WriteBool(RequestTransfer);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.AcceptTransfer) {
        output.WriteRawTag(24);
        output.WriteBool(AcceptTransfer);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ResendChunks) {
        output.WriteRawTag(34);
        output.WriteMessage(ResendChunks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PayloadId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PayloadId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.RequestTransfer) {
        output.WriteRawTag(16);
        output.WriteBool(RequestTransfer);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.AcceptTransfer) {
        output.WriteRawTag(24);
        output.WriteBool(AcceptTransfer);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ResendChunks) {
        output.WriteRawTag(34);
        output.WriteMessage(ResendChunks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PayloadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PayloadId);
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.RequestTransfer) {
        size += 1 + 1;
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.AcceptTransfer) {
        size += 1 + 1;
      }
      if (payloadVariantCase_ == PayloadVariantOneofCase.ResendChunks) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResendChunks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ChunkedPayloadResponse other) {
      if (other == null) {
        return;
      }
      if (other.PayloadId != 0) {
        PayloadId = other.PayloadId;
      }
      switch (other.PayloadVariantCase) {
        case PayloadVariantOneofCase.RequestTransfer:
          RequestTransfer = other.RequestTransfer;
          break;
        case PayloadVariantOneofCase.AcceptTransfer:
          AcceptTransfer = other.AcceptTransfer;
          break;
        case PayloadVariantOneofCase.ResendChunks:
          if (ResendChunks == null) {
            ResendChunks = new global::Meshtastic.Protobufs.resend_chunks();
          }
          ResendChunks.MergeFrom(other.ResendChunks);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PayloadId = input.ReadUInt32();
            break;
          }
          case 16: {
            RequestTransfer = input.ReadBool();
            break;
          }
          case 24: {
            AcceptTransfer = input.ReadBool();
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.resend_chunks subBuilder = new global::Meshtastic.Protobufs.resend_chunks();
            if (payloadVariantCase_ == PayloadVariantOneofCase.ResendChunks) {
              subBuilder.MergeFrom(ResendChunks);
            }
            input.ReadMessage(subBuilder);
            ResendChunks = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PayloadId = input.ReadUInt32();
            break;
          }
          case 16: {
            RequestTransfer = input.ReadBool();
            break;
          }
          case 24: {
            AcceptTransfer = input.ReadBool();
            break;
          }
          case 34: {
            global::Meshtastic.Protobufs.resend_chunks subBuilder = new global::Meshtastic.Protobufs.resend_chunks();
            if (payloadVariantCase_ == PayloadVariantOneofCase.ResendChunks) {
              subBuilder.MergeFrom(ResendChunks);
            }
            input.ReadMessage(subBuilder);
            ResendChunks = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
